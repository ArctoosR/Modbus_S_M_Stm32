
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc0  08003dc0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dc0  08003dc0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dc0  08003dc0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000008c  08003e54  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003e54  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d83  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003258  00000000  00000000  00032e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00036090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00036f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dad  00000000  00000000  00037c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ad8  00000000  00000000  00051a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4a7  00000000  00000000  000664dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2984  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  000f29d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b80 	.word	0x08003b80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003b80 	.word	0x08003b80

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa41 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8e9 	bl	8000330 <MX_GPIO_Init>
  MX_TIM4_Init();
 800015e:	f000 f86f 	bl	8000240 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8bb 	bl	80002dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  eMBInit(MB_RTU , 0x0A , &huart1 , 19200 , &htim4 );
 8000166:	4b0f      	ldr	r3, [pc, #60]	; (80001a4 <main+0x58>)
 8000168:	9300      	str	r3, [sp, #0]
 800016a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800016e:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <main+0x5c>)
 8000170:	210a      	movs	r1, #10
 8000172:	2000      	movs	r0, #0
 8000174:	f003 f844 	bl	8003200 <eMBInit>
  eMBEnable( );
 8000178:	f003 f8be 	bl	80032f8 <eMBEnable>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      eMBPoll();
 800017c:	f003 f8d8 	bl	8003330 <eMBPoll>
      usSRegHoldBuf[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3); //SW1
 8000180:	2108      	movs	r1, #8
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <main+0x60>)
 8000184:	f000 fdcc 	bl	8000d20 <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	b29a      	uxth	r2, r3
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <main+0x64>)
 800018e:	801a      	strh	r2, [r3, #0]
      usSRegHoldBuf[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //SW2
 8000190:	2110      	movs	r1, #16
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <main+0x60>)
 8000194:	f000 fdc4 	bl	8000d20 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	b29a      	uxth	r2, r3
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <main+0x64>)
 800019e:	805a      	strh	r2, [r3, #2]
      eMBPoll();
 80001a0:	e7ec      	b.n	800017c <main+0x30>
 80001a2:	bf00      	nop
 80001a4:	2000010c 	.word	0x2000010c
 80001a8:	20000154 	.word	0x20000154
 80001ac:	40010800 	.word	0x40010800
 80001b0:	200001a0 	.word	0x200001a0

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f003 fcd4 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fdbf 	bl	8000d80 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f8de 	bl	80003c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f82a 	bl	8001280 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f8c9 	bl	80003c8 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_TIM4_Init+0x94>)
 800025e:	4a1e      	ldr	r2, [pc, #120]	; (80002d8 <MX_TIM4_Init+0x98>)
 8000260:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <MX_TIM4_Init+0x94>)
 8000264:	2247      	movs	r2, #71	; 0x47
 8000266:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <MX_TIM4_Init+0x94>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800026e:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <MX_TIM4_Init+0x94>)
 8000270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000274:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_TIM4_Init+0x94>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_TIM4_Init+0x94>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <MX_TIM4_Init+0x94>)
 8000284:	f001 f996 	bl	80015b4 <HAL_TIM_Base_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800028e:	f000 f89b 	bl	80003c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000296:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_TIM4_Init+0x94>)
 80002a0:	f001 fa58 	bl	8001754 <HAL_TIM_ConfigClockSource>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80002aa:	f000 f88d 	bl	80003c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_TIM4_Init+0x94>)
 80002bc:	f001 fc06 	bl	8001acc <HAL_TIMEx_MasterConfigSynchronization>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80002c6:	f000 f87f 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000010c 	.word	0x2000010c
 80002d8:	40000800 	.word	0x40000800

080002dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 80002e2:	4a12      	ldr	r2, [pc, #72]	; (800032c <MX_USART1_UART_Init+0x50>)
 80002e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 80002e8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80002ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 8000302:	220c      	movs	r2, #12
 8000304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_USART1_UART_Init+0x4c>)
 8000314:	f001 fc38 	bl	8001b88 <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800031e:	f000 f853 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000154 	.word	0x20000154
 800032c:	40013800 	.word	0x40013800

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <MX_GPIO_Init+0x90>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a17      	ldr	r2, [pc, #92]	; (80003c0 <MX_GPIO_Init+0x90>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800037a:	4812      	ldr	r0, [pc, #72]	; (80003c4 <MX_GPIO_Init+0x94>)
 800037c:	f000 fce7 	bl	8000d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : sw2_Pin sw1_Pin */
  GPIO_InitStruct.Pin = sw2_Pin|sw1_Pin;
 8000380:	230c      	movs	r3, #12
 8000382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038c:	f107 0308 	add.w	r3, r7, #8
 8000390:	4619      	mov	r1, r3
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <MX_GPIO_Init+0x94>)
 8000394:	f000 fb40 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_RTS_Pin */
  GPIO_InitStruct.Pin = RS485_RTS_Pin;
 8000398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800039c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039e:	2301      	movs	r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RS485_RTS_GPIO_Port, &GPIO_InitStruct);
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_GPIO_Init+0x94>)
 80003b2:	f000 fb31 	bl	8000a18 <HAL_GPIO_Init>

}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010800 	.word	0x40010800

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	; (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a09      	ldr	r2, [pc, #36]	; (800046c <HAL_TIM_Base_MspInit+0x34>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d10b      	bne.n	8000462 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <HAL_TIM_Base_MspInit+0x38>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a08      	ldr	r2, [pc, #32]	; (8000470 <HAL_TIM_Base_MspInit+0x38>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_TIM_Base_MspInit+0x38>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 0304 	and.w	r3, r3, #4
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40000800 	.word	0x40000800
 8000470:	40021000 	.word	0x40021000

08000474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a20      	ldr	r2, [pc, #128]	; (8000510 <HAL_UART_MspInit+0x9c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d139      	bne.n	8000508 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <HAL_UART_MspInit+0xa0>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a1e      	ldr	r2, [pc, #120]	; (8000514 <HAL_UART_MspInit+0xa0>)
 800049a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <HAL_UART_MspInit+0xa0>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <HAL_UART_MspInit+0xa0>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a18      	ldr	r2, [pc, #96]	; (8000514 <HAL_UART_MspInit+0xa0>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <HAL_UART_MspInit+0xa0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ce:	2303      	movs	r3, #3
 80004d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	4619      	mov	r1, r3
 80004d8:	480f      	ldr	r0, [pc, #60]	; (8000518 <HAL_UART_MspInit+0xa4>)
 80004da:	f000 fa9d 	bl	8000a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <HAL_UART_MspInit+0xa4>)
 80004f4:	f000 fa90 	bl	8000a18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	2025      	movs	r0, #37	; 0x25
 80004fe:	f000 f9a4 	bl	800084a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000502:	2025      	movs	r0, #37	; 0x25
 8000504:	f000 f9bd 	bl	8000882 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40013800 	.word	0x40013800
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f87f 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <USART1_IRQHandler+0x10>)
 8000572:	f001 fc85 	bl	8001e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000154 	.word	0x20000154

08000580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005b2:	f7ff ffe5 	bl	8000580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f003 faa9 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fdc7 	bl	800014c <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80005c8:	08003dc8 	.word	0x08003dc8
  ldr r2, =_sbss
 80005cc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80005d0:	200002d4 	.word	0x200002d4

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x28>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f923 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	200f      	movs	r0, #15
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f7ff feee 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f93b 	bl	800089e <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f903 	bl	800084a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	20000198 	.word	0x20000198

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000198 	.word	0x20000198

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <__NVIC_EnableIRQ+0x34>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff90 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff2d 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff42 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff90 	bl	800078c <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5f 	bl	8000738 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff35 	bl	8000700 <__NVIC_EnableIRQ>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ffa2 	bl	80007f0 <SysTick_Config>
 80008ac:	4603      	mov	r3, r0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b085      	sub	sp, #20
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d008      	beq.n	80008de <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2204      	movs	r2, #4
 80008d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e020      	b.n	8000920 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 020e 	bic.w	r2, r2, #14
 80008ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0201 	bic.w	r2, r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
	...

0800092c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800093e:	2b02      	cmp	r3, #2
 8000940:	d005      	beq.n	800094e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2204      	movs	r2, #4
 8000946:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e051      	b.n	80009f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 020e 	bic.w	r2, r2, #14
 800095c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0201 	bic.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a22      	ldr	r2, [pc, #136]	; (80009fc <HAL_DMA_Abort_IT+0xd0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d029      	beq.n	80009cc <HAL_DMA_Abort_IT+0xa0>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <HAL_DMA_Abort_IT+0xd4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d022      	beq.n	80009c8 <HAL_DMA_Abort_IT+0x9c>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_DMA_Abort_IT+0xd8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d01a      	beq.n	80009c2 <HAL_DMA_Abort_IT+0x96>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_DMA_Abort_IT+0xdc>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d012      	beq.n	80009bc <HAL_DMA_Abort_IT+0x90>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <HAL_DMA_Abort_IT+0xe0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d00a      	beq.n	80009b6 <HAL_DMA_Abort_IT+0x8a>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <HAL_DMA_Abort_IT+0xe4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d102      	bne.n	80009b0 <HAL_DMA_Abort_IT+0x84>
 80009aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009ae:	e00e      	b.n	80009ce <HAL_DMA_Abort_IT+0xa2>
 80009b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009b4:	e00b      	b.n	80009ce <HAL_DMA_Abort_IT+0xa2>
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	e008      	b.n	80009ce <HAL_DMA_Abort_IT+0xa2>
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	e005      	b.n	80009ce <HAL_DMA_Abort_IT+0xa2>
 80009c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c6:	e002      	b.n	80009ce <HAL_DMA_Abort_IT+0xa2>
 80009c8:	2310      	movs	r3, #16
 80009ca:	e000      	b.n	80009ce <HAL_DMA_Abort_IT+0xa2>
 80009cc:	2301      	movs	r3, #1
 80009ce:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <HAL_DMA_Abort_IT+0xe8>)
 80009d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	4798      	blx	r3
    } 
  }
  return status;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020008 	.word	0x40020008
 8000a00:	4002001c 	.word	0x4002001c
 8000a04:	40020030 	.word	0x40020030
 8000a08:	40020044 	.word	0x40020044
 8000a0c:	40020058 	.word	0x40020058
 8000a10:	4002006c 	.word	0x4002006c
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e169      	b.n	8000d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8158 	bne.w	8000cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4a9a      	ldr	r2, [pc, #616]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d05e      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a54:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d875      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a5a:	4a98      	ldr	r2, [pc, #608]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d058      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a60:	4a96      	ldr	r2, [pc, #600]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d86f      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a66:	4a96      	ldr	r2, [pc, #600]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d052      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d869      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a72:	4a94      	ldr	r2, [pc, #592]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d04c      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a78:	4a92      	ldr	r2, [pc, #584]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d863      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d046      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
 8000a84:	4a90      	ldr	r2, [pc, #576]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d85d      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d82a      	bhi.n	8000ae4 <HAL_GPIO_Init+0xcc>
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d859      	bhi.n	8000b46 <HAL_GPIO_Init+0x12e>
 8000a92:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <HAL_GPIO_Init+0x80>)
 8000a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a98:	08000b13 	.word	0x08000b13
 8000a9c:	08000aed 	.word	0x08000aed
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000b41 	.word	0x08000b41
 8000aa8:	08000b47 	.word	0x08000b47
 8000aac:	08000b47 	.word	0x08000b47
 8000ab0:	08000b47 	.word	0x08000b47
 8000ab4:	08000b47 	.word	0x08000b47
 8000ab8:	08000b47 	.word	0x08000b47
 8000abc:	08000b47 	.word	0x08000b47
 8000ac0:	08000b47 	.word	0x08000b47
 8000ac4:	08000b47 	.word	0x08000b47
 8000ac8:	08000b47 	.word	0x08000b47
 8000acc:	08000b47 	.word	0x08000b47
 8000ad0:	08000b47 	.word	0x08000b47
 8000ad4:	08000b47 	.word	0x08000b47
 8000ad8:	08000b47 	.word	0x08000b47
 8000adc:	08000af5 	.word	0x08000af5
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	4a79      	ldr	r2, [pc, #484]	; (8000ccc <HAL_GPIO_Init+0x2b4>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aea:	e02c      	b.n	8000b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e029      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3304      	adds	r3, #4
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e024      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3308      	adds	r3, #8
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e01f      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e01a      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e013      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	611a      	str	r2, [r3, #16]
          break;
 8000b32:	e009      	b.n	8000b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	615a      	str	r2, [r3, #20]
          break;
 8000b3e:	e003      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e000      	b.n	8000b48 <HAL_GPIO_Init+0x130>
          break;
 8000b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d801      	bhi.n	8000b52 <HAL_GPIO_Init+0x13a>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e001      	b.n	8000b56 <HAL_GPIO_Init+0x13e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3304      	adds	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	; 0xff
 8000b5c:	d802      	bhi.n	8000b64 <HAL_GPIO_Init+0x14c>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x152>
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	3b08      	subs	r3, #8
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	210f      	movs	r1, #15
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	6a39      	ldr	r1, [r7, #32]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80b1 	beq.w	8000cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b98:	4b4d      	ldr	r3, [pc, #308]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a4c      	ldr	r2, [pc, #304]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb0:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1ec>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3f      	ldr	r2, [pc, #252]	; (8000cdc <HAL_GPIO_Init+0x2c4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1e8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3e      	ldr	r2, [pc, #248]	; (8000ce0 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_GPIO_Init+0x2cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e0>
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e006      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1ee>
 8000c04:	2300      	movs	r3, #0
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c16:	492f      	ldr	r1, [pc, #188]	; (8000cd4 <HAL_GPIO_Init+0x2bc>)
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	492c      	ldr	r1, [pc, #176]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	4928      	ldr	r1, [pc, #160]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	4013      	ands	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4922      	ldr	r1, [pc, #136]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
 8000c64:	e006      	b.n	8000c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	491e      	ldr	r1, [pc, #120]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d006      	beq.n	8000c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	4918      	ldr	r1, [pc, #96]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	608b      	str	r3, [r1, #8]
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000c98:	4013      	ands	r3, r2
 8000c9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d021      	beq.n	8000cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <HAL_GPIO_Init+0x2d0>)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60cb      	str	r3, [r1, #12]
 8000cb4:	e021      	b.n	8000cfa <HAL_GPIO_Init+0x2e2>
 8000cb6:	bf00      	nop
 8000cb8:	10320000 	.word	0x10320000
 8000cbc:	10310000 	.word	0x10310000
 8000cc0:	10220000 	.word	0x10220000
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10110000 	.word	0x10110000
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4909      	ldr	r1, [pc, #36]	; (8000d1c <HAL_GPIO_Init+0x304>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f47f ae8e 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	372c      	adds	r7, #44	; 0x2c
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e001      	b.n	8000d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	807b      	strh	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d5e:	787b      	ldrb	r3, [r7, #1]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d6a:	e003      	b.n	8000d74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	041a      	lsls	r2, r3, #16
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
	...

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e26c      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8087 	beq.w	8000eae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da0:	4b92      	ldr	r3, [pc, #584]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00c      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dac:	4b8f      	ldr	r3, [pc, #572]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d112      	bne.n	8000dde <HAL_RCC_OscConfig+0x5e>
 8000db8:	4b8c      	ldr	r3, [pc, #560]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d10b      	bne.n	8000dde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc6:	4b89      	ldr	r3, [pc, #548]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d06c      	beq.n	8000eac <HAL_RCC_OscConfig+0x12c>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d168      	bne.n	8000eac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e246      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x76>
 8000de8:	4b80      	ldr	r3, [pc, #512]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a7f      	ldr	r2, [pc, #508]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e02e      	b.n	8000e54 <HAL_RCC_OscConfig+0xd4>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x98>
 8000dfe:	4b7b      	ldr	r3, [pc, #492]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a7a      	ldr	r2, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b78      	ldr	r3, [pc, #480]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a77      	ldr	r2, [pc, #476]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e01d      	b.n	8000e54 <HAL_RCC_OscConfig+0xd4>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0xbc>
 8000e22:	4b72      	ldr	r3, [pc, #456]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a71      	ldr	r2, [pc, #452]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b6f      	ldr	r3, [pc, #444]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6e      	ldr	r2, [pc, #440]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e00b      	b.n	8000e54 <HAL_RCC_OscConfig+0xd4>
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a6a      	ldr	r2, [pc, #424]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b68      	ldr	r3, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a67      	ldr	r2, [pc, #412]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d013      	beq.n	8000e84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc14 	bl	8000688 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fc10 	bl	8000688 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1fa      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f0      	beq.n	8000e64 <HAL_RCC_OscConfig+0xe4>
 8000e82:	e014      	b.n	8000eae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fc00 	bl	8000688 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fbfc 	bl	8000688 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e1e6      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	4b53      	ldr	r3, [pc, #332]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1f0      	bne.n	8000e8c <HAL_RCC_OscConfig+0x10c>
 8000eaa:	e000      	b.n	8000eae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d063      	beq.n	8000f82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eba:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f003 030c 	and.w	r3, r3, #12
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ec6:	4b49      	ldr	r3, [pc, #292]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d11c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x18c>
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d116      	bne.n	8000f0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x176>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d001      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e1ba      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4939      	ldr	r1, [pc, #228]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	e03a      	b.n	8000f82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d020      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fbb5 	bl	8000688 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fbb1 	bl	8000688 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e19b      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	4927      	ldr	r1, [pc, #156]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	e015      	b.n	8000f82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <HAL_RCC_OscConfig+0x270>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fb94 	bl	8000688 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f64:	f7ff fb90 	bl	8000688 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e17a      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d03a      	beq.n	8001004 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d019      	beq.n	8000fca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_RCC_OscConfig+0x274>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fb74 	bl	8000688 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fb70 	bl	8000688 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e15a      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fad8 	bl	8001578 <RCC_Delay>
 8000fc8:	e01c      	b.n	8001004 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_RCC_OscConfig+0x274>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fb5a 	bl	8000688 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd6:	e00f      	b.n	8000ff8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fb56 	bl	8000688 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d908      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e140      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	42420000 	.word	0x42420000
 8000ff4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff8:	4b9e      	ldr	r3, [pc, #632]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e9      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80a6 	beq.w	800115e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001016:	4b97      	ldr	r3, [pc, #604]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10d      	bne.n	800103e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b94      	ldr	r3, [pc, #592]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a93      	ldr	r2, [pc, #588]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b91      	ldr	r3, [pc, #580]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800103a:	2301      	movs	r3, #1
 800103c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103e:	4b8e      	ldr	r3, [pc, #568]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001046:	2b00      	cmp	r3, #0
 8001048:	d118      	bne.n	800107c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800104a:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a8a      	ldr	r2, [pc, #552]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb17 	bl	8000688 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105e:	f7ff fb13 	bl	8000688 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e0fd      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <HAL_RCC_OscConfig+0x4f8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d106      	bne.n	8001092 <HAL_RCC_OscConfig+0x312>
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6213      	str	r3, [r2, #32]
 8001090:	e02d      	b.n	80010ee <HAL_RCC_OscConfig+0x36e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x334>
 800109a:	4b76      	ldr	r3, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a75      	ldr	r2, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b73      	ldr	r3, [pc, #460]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a72      	ldr	r2, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	e01c      	b.n	80010ee <HAL_RCC_OscConfig+0x36e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d10c      	bne.n	80010d6 <HAL_RCC_OscConfig+0x356>
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a6c      	ldr	r2, [pc, #432]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a69      	ldr	r2, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	e00b      	b.n	80010ee <HAL_RCC_OscConfig+0x36e>
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a63      	ldr	r2, [pc, #396]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fac7 	bl	8000688 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff fac3 	bl	8000688 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f241 3288 	movw	r2, #5000	; 0x1388
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e0ab      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	4b57      	ldr	r3, [pc, #348]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0ee      	beq.n	80010fe <HAL_RCC_OscConfig+0x37e>
 8001120:	e014      	b.n	800114c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fab1 	bl	8000688 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff faad 	bl	8000688 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e095      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ee      	bne.n	800112a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d105      	bne.n	800115e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001152:	4b48      	ldr	r3, [pc, #288]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a47      	ldr	r2, [pc, #284]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8081 	beq.w	800126a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b08      	cmp	r3, #8
 8001172:	d061      	beq.n	8001238 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d146      	bne.n	800120a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <HAL_RCC_OscConfig+0x4fc>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fa81 	bl	8000688 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fa7d 	bl	8000688 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e067      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b0:	d108      	bne.n	80011c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011b2:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	492d      	ldr	r1, [pc, #180]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a19      	ldr	r1, [r3, #32]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	430b      	orrs	r3, r1
 80011d6:	4927      	ldr	r1, [pc, #156]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_OscConfig+0x4fc>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fa51 	bl	8000688 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff fa4d 	bl	8000688 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e037      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x46a>
 8001208:	e02f      	b.n	800126a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_RCC_OscConfig+0x4fc>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fa3a 	bl	8000688 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001218:	f7ff fa36 	bl	8000688 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e020      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x498>
 8001236:	e018      	b.n	800126a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e013      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_RCC_OscConfig+0x4f4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	429a      	cmp	r2, r3
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	40007000 	.word	0x40007000
 800127c:	42420060 	.word	0x42420060

08001280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d0      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d910      	bls.n	80012c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b67      	ldr	r3, [pc, #412]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 0207 	bic.w	r2, r3, #7
 80012aa:	4965      	ldr	r1, [pc, #404]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0b8      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	494d      	ldr	r1, [pc, #308]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d040      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d115      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e07f      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e073      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e06b      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 0203 	bic.w	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4936      	ldr	r1, [pc, #216]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001370:	f7ff f98a 	bl	8000688 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	e00a      	b.n	800138e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7ff f986 	bl	8000688 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e053      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 020c 	and.w	r2, r3, #12
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	429a      	cmp	r2, r3
 800139e:	d1eb      	bne.n	8001378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d210      	bcs.n	80013d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0207 	bic.w	r2, r3, #7
 80013b6:	4922      	ldr	r1, [pc, #136]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e032      	b.n	8001436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4916      	ldr	r1, [pc, #88]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	490e      	ldr	r1, [pc, #56]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800140e:	f000 f821 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001412:	4602      	mov	r2, r0
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	490a      	ldr	r1, [pc, #40]	; (8001448 <HAL_RCC_ClockConfig+0x1c8>)
 8001420:	5ccb      	ldrb	r3, [r1, r3]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1cc>)
 8001428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_ClockConfig+0x1d0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f8e8 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40022000 	.word	0x40022000
 8001444:	40021000 	.word	0x40021000
 8001448:	08003ba8 	.word	0x08003ba8
 800144c:	20000000 	.word	0x20000000
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001454:	b490      	push	{r4, r7}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_GetSysClockFreq+0xb0>)
 800145c:	1d3c      	adds	r4, r7, #4
 800145e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001464:	f240 2301 	movw	r3, #513	; 0x201
 8001468:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d002      	beq.n	8001494 <HAL_RCC_GetSysClockFreq+0x40>
 800148e:	2b08      	cmp	r3, #8
 8001490:	d003      	beq.n	800149a <HAL_RCC_GetSysClockFreq+0x46>
 8001492:	e02d      	b.n	80014f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001496:	623b      	str	r3, [r7, #32]
      break;
 8001498:	e02d      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014a6:	4413      	add	r3, r2
 80014a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	0c5b      	lsrs	r3, r3, #17
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014c6:	4413      	add	r3, r2
 80014c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014d2:	fb02 f203 	mul.w	r2, r2, r3
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
 80014de:	e004      	b.n	80014ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014e4:	fb02 f303 	mul.w	r3, r2, r3
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	623b      	str	r3, [r7, #32]
      break;
 80014ee:	e002      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014f2:	623b      	str	r3, [r7, #32]
      break;
 80014f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014f6:	6a3b      	ldr	r3, [r7, #32]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc90      	pop	{r4, r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	08003b98 	.word	0x08003b98
 8001508:	40021000 	.word	0x40021000
 800150c:	007a1200 	.word	0x007a1200
 8001510:	003d0900 	.word	0x003d0900

08001514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <HAL_RCC_GetHCLKFreq+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000000 	.word	0x20000000

08001528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800152c:	f7ff fff2 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	4903      	ldr	r1, [pc, #12]	; (800154c <HAL_RCC_GetPCLK1Freq+0x24>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	08003bb8 	.word	0x08003bb8

08001550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001554:	f7ff ffde 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0adb      	lsrs	r3, r3, #11
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	4903      	ldr	r1, [pc, #12]	; (8001574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	08003bb8 	.word	0x08003bb8

08001578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <RCC_Delay+0x34>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <RCC_Delay+0x38>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0a5b      	lsrs	r3, r3, #9
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001594:	bf00      	nop
  }
  while (Delay --);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	60fa      	str	r2, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f9      	bne.n	8001594 <RCC_Delay+0x1c>
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000000 	.word	0x20000000
 80015b0:	10624dd3 	.word	0x10624dd3

080015b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e041      	b.n	800164a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7fe ff2c 	bl	8000438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3304      	adds	r3, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f000 f972 	bl	80018dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d001      	beq.n	800166c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e03a      	b.n	80016e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_TIM_Base_Start_IT+0x98>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00e      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001696:	d009      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d004      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x58>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d111      	bne.n	80016d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d010      	beq.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ce:	e007      	b.n	80016e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40000400 	.word	0x40000400
 80016f4:	40000800 	.word	0x40000800

080016f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a1a      	ldr	r2, [r3, #32]
 8001716:	f241 1311 	movw	r3, #4369	; 0x1111
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10f      	bne.n	8001740 <HAL_TIM_Base_Stop_IT+0x48>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	f240 4344 	movw	r3, #1092	; 0x444
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d107      	bne.n	8001740 <HAL_TIM_Base_Stop_IT+0x48>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_TIM_ConfigClockSource+0x18>
 8001768:	2302      	movs	r3, #2
 800176a:	e0b3      	b.n	80018d4 <HAL_TIM_ConfigClockSource+0x180>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800178a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001792:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a4:	d03e      	beq.n	8001824 <HAL_TIM_ConfigClockSource+0xd0>
 80017a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017aa:	f200 8087 	bhi.w	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b2:	f000 8085 	beq.w	80018c0 <HAL_TIM_ConfigClockSource+0x16c>
 80017b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ba:	d87f      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017bc:	2b70      	cmp	r3, #112	; 0x70
 80017be:	d01a      	beq.n	80017f6 <HAL_TIM_ConfigClockSource+0xa2>
 80017c0:	2b70      	cmp	r3, #112	; 0x70
 80017c2:	d87b      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017c4:	2b60      	cmp	r3, #96	; 0x60
 80017c6:	d050      	beq.n	800186a <HAL_TIM_ConfigClockSource+0x116>
 80017c8:	2b60      	cmp	r3, #96	; 0x60
 80017ca:	d877      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017cc:	2b50      	cmp	r3, #80	; 0x50
 80017ce:	d03c      	beq.n	800184a <HAL_TIM_ConfigClockSource+0xf6>
 80017d0:	2b50      	cmp	r3, #80	; 0x50
 80017d2:	d873      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017d4:	2b40      	cmp	r3, #64	; 0x40
 80017d6:	d058      	beq.n	800188a <HAL_TIM_ConfigClockSource+0x136>
 80017d8:	2b40      	cmp	r3, #64	; 0x40
 80017da:	d86f      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017dc:	2b30      	cmp	r3, #48	; 0x30
 80017de:	d064      	beq.n	80018aa <HAL_TIM_ConfigClockSource+0x156>
 80017e0:	2b30      	cmp	r3, #48	; 0x30
 80017e2:	d86b      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d060      	beq.n	80018aa <HAL_TIM_ConfigClockSource+0x156>
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d867      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d05c      	beq.n	80018aa <HAL_TIM_ConfigClockSource+0x156>
 80017f0:	2b10      	cmp	r3, #16
 80017f2:	d05a      	beq.n	80018aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80017f4:	e062      	b.n	80018bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6899      	ldr	r1, [r3, #8]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f000 f942 	bl	8001a8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001818:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	609a      	str	r2, [r3, #8]
      break;
 8001822:	e04e      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f000 f92b 	bl	8001a8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001846:	609a      	str	r2, [r3, #8]
      break;
 8001848:	e03b      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6859      	ldr	r1, [r3, #4]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	461a      	mov	r2, r3
 8001858:	f000 f8a2 	bl	80019a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2150      	movs	r1, #80	; 0x50
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f8f9 	bl	8001a5a <TIM_ITRx_SetConfig>
      break;
 8001868:	e02b      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6859      	ldr	r1, [r3, #4]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	461a      	mov	r2, r3
 8001878:	f000 f8c0 	bl	80019fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2160      	movs	r1, #96	; 0x60
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f8e9 	bl	8001a5a <TIM_ITRx_SetConfig>
      break;
 8001888:	e01b      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	461a      	mov	r2, r3
 8001898:	f000 f882 	bl	80019a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f8d9 	bl	8001a5a <TIM_ITRx_SetConfig>
      break;
 80018a8:	e00b      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4610      	mov	r0, r2
 80018b6:	f000 f8d0 	bl	8001a5a <TIM_ITRx_SetConfig>
        break;
 80018ba:	e002      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80018bc:	bf00      	nop
 80018be:	e000      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80018c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a29      	ldr	r2, [pc, #164]	; (8001994 <TIM_Base_SetConfig+0xb8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00b      	beq.n	800190c <TIM_Base_SetConfig+0x30>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fa:	d007      	beq.n	800190c <TIM_Base_SetConfig+0x30>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a26      	ldr	r2, [pc, #152]	; (8001998 <TIM_Base_SetConfig+0xbc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d003      	beq.n	800190c <TIM_Base_SetConfig+0x30>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a25      	ldr	r2, [pc, #148]	; (800199c <TIM_Base_SetConfig+0xc0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d108      	bne.n	800191e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <TIM_Base_SetConfig+0xb8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00b      	beq.n	800193e <TIM_Base_SetConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192c:	d007      	beq.n	800193e <TIM_Base_SetConfig+0x62>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <TIM_Base_SetConfig+0xbc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d003      	beq.n	800193e <TIM_Base_SetConfig+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a18      	ldr	r2, [pc, #96]	; (800199c <TIM_Base_SetConfig+0xc0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d108      	bne.n	8001950 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <TIM_Base_SetConfig+0xb8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d103      	bne.n	8001984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	615a      	str	r2, [r3, #20]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40000400 	.word	0x40000400
 800199c:	40000800 	.word	0x40000800

080019a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	f023 0201 	bic.w	r2, r3, #1
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f023 030a 	bic.w	r3, r3, #10
 80019dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	621a      	str	r2, [r3, #32]
}
 80019f2:	bf00      	nop
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f023 0210 	bic.w	r2, r3, #16
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	031b      	lsls	r3, r3, #12
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	621a      	str	r2, [r3, #32]
}
 8001a50:	bf00      	nop
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f043 0307 	orr.w	r3, r3, #7
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	609a      	str	r2, [r3, #8]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001aa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	021a      	lsls	r2, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	609a      	str	r2, [r3, #8]
}
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e046      	b.n	8001b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00e      	beq.n	8001b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d009      	beq.n	8001b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d004      	beq.n	8001b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10c      	bne.n	8001b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800

08001b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e03f      	b.n	8001c1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fc60 	bl	8000474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2224      	movs	r2, #36	; 0x24
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fcdd 	bl	800258c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d130      	bne.n	8001c9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_UART_Transmit_IT+0x26>
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e029      	b.n	8001ca0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Transmit_IT+0x38>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e022      	b.n	8001ca0 <HAL_UART_Transmit_IT+0x7e>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2221      	movs	r2, #33	; 0x21
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d11d      	bne.n	8001d00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_UART_Receive_IT+0x26>
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e016      	b.n	8001d02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_UART_Receive_IT+0x38>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e00f      	b.n	8001d02 <HAL_UART_Receive_IT+0x58>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fa92 	bl	8002220 <UART_Start_Receive_IT>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	e000      	b.n	8001d02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001d22:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02a      	beq.n	8001d88 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d40:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d013      	beq.n	8001d72 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <HAL_UART_AbortTransmit_IT+0x9c>)
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fde8 	bl	800092c <HAL_DMA_Abort_IT>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01c      	beq.n	8001d9c <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4798      	blx	r3
 8001d70:	e014      	b.n	8001d9c <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fa30 	bl	80021e6 <HAL_UART_AbortTransmitCpltCallback>
 8001d86:	e009      	b.n	8001d9c <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa25 	bl	80021e6 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08002313 	.word	0x08002313

08001dac <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d107      	bne.n	8001dec <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0210 	bic.w	r2, r2, #16
 8001dea:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02d      	beq.n	8001e56 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e08:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d013      	beq.n	8001e3a <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <HAL_UART_AbortReceive_IT+0xd0>)
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fd84 	bl	800092c <HAL_DMA_Abort_IT>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d022      	beq.n	8001e70 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e34:	4610      	mov	r0, r2
 8001e36:	4798      	blx	r3
 8001e38:	e01a      	b.n	8001e70 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f9d2 	bl	80021f8 <HAL_UART_AbortReceiveCpltCallback>
 8001e54:	e00c      	b.n	8001e70 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f9c4 	bl	80021f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	0800233d 	.word	0x0800233d

08001e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x52>
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fab5 	bl	800243a <UART_Receive_IT>
      return;
 8001ed0:	e17b      	b.n	80021ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80b1 	beq.w	800203c <HAL_UART_IRQHandler+0x1bc>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_UART_IRQHandler+0x70>
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a6 	beq.w	800203c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_UART_IRQHandler+0x90>
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_UART_IRQHandler+0xb0>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_UART_IRQHandler+0xd0>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f043 0204 	orr.w	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00f      	beq.n	8001f7a <HAL_UART_IRQHandler+0xfa>
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <HAL_UART_IRQHandler+0xee>
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0208 	orr.w	r2, r3, #8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 811e 	beq.w	80021c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_UART_IRQHandler+0x11e>
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fa4e 	bl	800243a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <HAL_UART_IRQHandler+0x146>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d031      	beq.n	800202a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f963 	bl	8002292 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d023      	beq.n	8002022 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d013      	beq.n	800201a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	4a76      	ldr	r2, [pc, #472]	; (80021d0 <HAL_UART_IRQHandler+0x350>)
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fc94 	bl	800092c <HAL_DMA_Abort_IT>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002014:	4610      	mov	r0, r2
 8002016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	e00e      	b.n	8002038 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8da 	bl	80021d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	e00a      	b.n	8002038 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8d6 	bl	80021d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	e006      	b.n	8002038 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8d2 	bl	80021d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002036:	e0c3      	b.n	80021c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002038:	bf00      	nop
    return;
 800203a:	e0c1      	b.n	80021c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 80a1 	bne.w	8002188 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 809b 	beq.w	8002188 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8095 	beq.w	8002188 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d04e      	beq.n	8002120 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800208c:	8a3b      	ldrh	r3, [r7, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8098 	beq.w	80021c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002098:	8a3a      	ldrh	r2, [r7, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	f080 8092 	bcs.w	80021c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8a3a      	ldrh	r2, [r7, #16]
 80020a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d02b      	beq.n	8002108 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0210 	bic.w	r2, r2, #16
 80020fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fbd7 	bl	80008b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002110:	b29b      	uxth	r3, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f876 	bl	800220a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800211e:	e051      	b.n	80021c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002128:	b29b      	uxth	r3, r3
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d047      	beq.n	80021c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d044      	beq.n	80021c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800214c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0210 	bic.w	r2, r2, #16
 800217a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	4619      	mov	r1, r3
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f842 	bl	800220a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002186:	e01f      	b.n	80021c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_UART_IRQHandler+0x324>
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f8e5 	bl	800236c <UART_Transmit_IT>
    return;
 80021a2:	e012      	b.n	80021ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <HAL_UART_IRQHandler+0x34a>
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f926 	bl	800240a <UART_EndTransmit_IT>
    return;
 80021be:	e004      	b.n	80021ca <HAL_UART_IRQHandler+0x34a>
    return;
 80021c0:	bf00      	nop
 80021c2:	e002      	b.n	80021ca <HAL_UART_IRQHandler+0x34a>
      return;
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <HAL_UART_IRQHandler+0x34a>
      return;
 80021c8:	bf00      	nop
  }
}
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	080022eb 	.word	0x080022eb

080021d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	88fa      	ldrh	r2, [r7, #6]
 800223e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2222      	movs	r2, #34	; 0x22
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002264:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0220 	orr.w	r2, r2, #32
 8002284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0210 	bic.w	r2, r2, #16
 80022d0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff ff65 	bl	80021d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff ff59 	bl	80021e6 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7ff ff4a 	bl	80021f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b21      	cmp	r3, #33	; 0x21
 800237e:	d13e      	bne.n	80023fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002388:	d114      	bne.n	80023b4 <UART_Transmit_IT+0x48>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d110      	bne.n	80023b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	1c9a      	adds	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	621a      	str	r2, [r3, #32]
 80023b2:	e008      	b.n	80023c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6211      	str	r1, [r2, #32]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4619      	mov	r1, r3
 80023d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
  }
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002420:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f001 f93c 	bl	80036a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b22      	cmp	r3, #34	; 0x22
 800244c:	f040 8099 	bne.w	8002582 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d117      	bne.n	800248a <UART_Receive_IT+0x50>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d113      	bne.n	800248a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002478:	b29a      	uxth	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	1c9a      	adds	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
 8002488:	e026      	b.n	80024d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249c:	d007      	beq.n	80024ae <UART_Receive_IT+0x74>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <UART_Receive_IT+0x82>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e008      	b.n	80024ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4619      	mov	r1, r3
 80024e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d148      	bne.n	800257e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0220 	bic.w	r2, r2, #32
 80024fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800250a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	2b01      	cmp	r3, #1
 800252a:	d123      	bne.n	8002574 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0210 	bic.w	r2, r2, #16
 8002540:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d10a      	bne.n	8002566 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fe4c 	bl	800220a <HAL_UARTEx_RxEventCallback>
 8002572:	e002      	b.n	800257a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f001 f877 	bl	8003668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e002      	b.n	8002584 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025c6:	f023 030c 	bic.w	r3, r3, #12
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <UART_SetConfig+0x114>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d103      	bne.n	80025fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f4:	f7fe ffac 	bl	8001550 <HAL_RCC_GetPCLK2Freq>
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	e002      	b.n	8002602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025fc:	f7fe ff94 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8002600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <UART_SetConfig+0x118>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	0119      	lsls	r1, r3, #4
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <UART_SetConfig+0x118>)
 800263a:	fba3 0302 	umull	r0, r3, r3, r2
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2064      	movs	r0, #100	; 0x64
 8002642:	fb00 f303 	mul.w	r3, r0, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	3332      	adds	r3, #50	; 0x32
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <UART_SetConfig+0x118>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	4419      	add	r1, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <UART_SetConfig+0x118>)
 8002672:	fba3 0302 	umull	r0, r3, r3, r2
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2064      	movs	r0, #100	; 0x64
 800267a:	fb00 f303 	mul.w	r3, r0, r3
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	3332      	adds	r3, #50	; 0x32
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <UART_SetConfig+0x118>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	440a      	add	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40013800 	.word	0x40013800
 80026a4:	51eb851f 	.word	0x51eb851f

080026a8 <eMBRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	803b      	strh	r3, [r7, #0]
#if S_REG_INPUT_NREGS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 80026b8:	2300      	movs	r3, #0
 80026ba:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <eMBRegInputCB+0xa0>)
 80026be:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 80026c0:	2300      	movs	r3, #0
 80026c2:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 80026c4:	2302      	movs	r3, #2
 80026c6:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <eMBRegInputCB+0xa4>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d32c      	bcc.n	8002736 <eMBRegInputCB+0x8e>
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	883b      	ldrh	r3, [r7, #0]
 80026e0:	441a      	add	r2, r3
 80026e2:	89f9      	ldrh	r1, [r7, #14]
 80026e4:	89bb      	ldrh	r3, [r7, #12]
 80026e6:	440b      	add	r3, r1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dc24      	bgt.n	8002736 <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 80026ec:	887a      	ldrh	r2, [r7, #2]
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 80026f4:	e01b      	b.n	800272e <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 80026f6:	8abb      	ldrh	r3, [r7, #20]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4413      	add	r3, r2
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	b299      	uxth	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	b2ca      	uxtb	r2, r1
 800270c:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 800270e:	8abb      	ldrh	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	8819      	ldrh	r1, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8002722:	8abb      	ldrh	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8002728:	883b      	ldrh	r3, [r7, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 800272e:	883b      	ldrh	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e0      	bne.n	80026f6 <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8002734:	e001      	b.n	800273a <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
#else
	return MB_ENOREG;
#endif
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200001b4 	.word	0x200001b4
 800274c:	200000aa 	.word	0x200000aa

08002750 <eMBRegHoldingCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	4608      	mov	r0, r1
 800275a:	4611      	mov	r1, r2
 800275c:	461a      	mov	r2, r3
 800275e:	4603      	mov	r3, r0
 8002760:	817b      	strh	r3, [r7, #10]
 8002762:	460b      	mov	r3, r1
 8002764:	813b      	strh	r3, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	71fb      	strb	r3, [r7, #7]
#if S_REG_HOLDING_NREGS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 800276a:	2300      	movs	r3, #0
 800276c:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <eMBRegHoldingCB+0x104>)
 8002770:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 8002772:	2300      	movs	r3, #0
 8002774:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 8002776:	230a      	movs	r3, #10
 8002778:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <eMBRegHoldingCB+0x108>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 8002780:	897b      	ldrh	r3, [r7, #10]
 8002782:	3b01      	subs	r3, #1
 8002784:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8002786:	897a      	ldrh	r2, [r7, #10]
 8002788:	8afb      	ldrh	r3, [r7, #22]
 800278a:	429a      	cmp	r2, r3
 800278c:	d359      	bcc.n	8002842 <eMBRegHoldingCB+0xf2>
 800278e:	897a      	ldrh	r2, [r7, #10]
 8002790:	893b      	ldrh	r3, [r7, #8]
 8002792:	441a      	add	r2, r3
 8002794:	8af9      	ldrh	r1, [r7, #22]
 8002796:	8abb      	ldrh	r3, [r7, #20]
 8002798:	440b      	add	r3, r1
 800279a:	429a      	cmp	r2, r3
 800279c:	dc51      	bgt.n	8002842 <eMBRegHoldingCB+0xf2>
    {
        iRegIndex = usAddress - usRegHoldStart;
 800279e:	897a      	ldrh	r2, [r7, #10]
 80027a0:	8a7b      	ldrh	r3, [r7, #18]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01e      	beq.n	80027ea <eMBRegHoldingCB+0x9a>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d043      	beq.n	8002838 <eMBRegHoldingCB+0xe8>
 80027b0:	e049      	b.n	8002846 <eMBRegHoldingCB+0xf6>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 80027b2:	8bbb      	ldrh	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	b299      	uxth	r1, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	60fa      	str	r2, [r7, #12]
 80027c6:	b2ca      	uxtb	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 80027ca:	8bbb      	ldrh	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	8819      	ldrh	r1, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	60fa      	str	r2, [r7, #12]
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 80027de:	8bbb      	ldrh	r3, [r7, #28]
 80027e0:	3301      	adds	r3, #1
 80027e2:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 80027e4:	893b      	ldrh	r3, [r7, #8]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e0      	bne.n	80027b2 <eMBRegHoldingCB+0x62>
            }
            break;
 80027f0:	e026      	b.n	8002840 <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	60fa      	str	r2, [r7, #12]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	8bbb      	ldrh	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	69b9      	ldr	r1, [r7, #24]
 8002802:	440b      	add	r3, r1
 8002804:	0212      	lsls	r2, r2, #8
 8002806:	b292      	uxth	r2, r2
 8002808:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	60fa      	str	r2, [r7, #12]
 8002810:	7818      	ldrb	r0, [r3, #0]
 8002812:	8bbb      	ldrh	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4413      	add	r3, r2
 800281a:	8819      	ldrh	r1, [r3, #0]
 800281c:	b282      	uxth	r2, r0
 800281e:	8bbb      	ldrh	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	69b8      	ldr	r0, [r7, #24]
 8002824:	4403      	add	r3, r0
 8002826:	430a      	orrs	r2, r1
 8002828:	b292      	uxth	r2, r2
 800282a:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 800282c:	8bbb      	ldrh	r3, [r7, #28]
 800282e:	3301      	adds	r3, #1
 8002830:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8002832:	893b      	ldrh	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8002838:	893b      	ldrh	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1d9      	bne.n	80027f2 <eMBRegHoldingCB+0xa2>
            }
            break;
 800283e:	bf00      	nop
        switch (eMode)
 8002840:	e001      	b.n	8002846 <eMBRegHoldingCB+0xf6>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002842:	2301      	movs	r3, #1
 8002844:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8002846:	7ffb      	ldrb	r3, [r7, #31]
#else
	return MB_ENOREG;
#endif
}
 8002848:	4618      	mov	r0, r3
 800284a:	3724      	adds	r7, #36	; 0x24
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	200001a0 	.word	0x200001a0
 8002858:	200000ac 	.word	0x200000ac

0800285c <eMBRegCoilsCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4603      	mov	r3, r0
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	460b      	mov	r3, r1
 8002870:	813b      	strh	r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	71fb      	strb	r3, [r7, #7]
    {
        eStatus = MB_ENOREG;
    }
    return eStatus;
#else
	return MB_ENOREG;
 8002876:	2301      	movs	r3, #1
#endif
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	803b      	strh	r3, [r7, #0]
#if S_DISCRETE_INPUT_NDISCRETES > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8002898:	883b      	ldrh	r3, [r7, #0]
 800289a:	08db      	lsrs	r3, r3, #3
 800289c:	b29b      	uxth	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <eMBRegDiscreteCB+0xe0>)
 80028a4:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 80028a6:	2300      	movs	r3, #0
 80028a8:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 80028aa:	2301      	movs	r3, #1
 80028ac:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <eMBRegDiscreteCB+0xe4>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START) && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	8a7b      	ldrh	r3, [r7, #18]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d349      	bcc.n	8002956 <eMBRegDiscreteCB+0xd2>
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	883b      	ldrh	r3, [r7, #0]
 80028c6:	441a      	add	r2, r3
 80028c8:	8a79      	ldrh	r1, [r7, #18]
 80028ca:	8a3b      	ldrh	r3, [r7, #16]
 80028cc:	440b      	add	r3, r1
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dc41      	bgt.n	8002956 <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	89fb      	ldrh	r3, [r7, #14]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	b29b      	uxth	r3, r3
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 80028ec:	e012      	b.n	8002914 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 80028ee:	8bbb      	ldrh	r3, [r7, #28]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	83ba      	strh	r2, [r7, #28]
 80028f4:	461a      	mov	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1898      	adds	r0, r3, r2
 80028fa:	687c      	ldr	r4, [r7, #4]
 80028fc:	1c63      	adds	r3, r4, #1
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	89bb      	ldrh	r3, [r7, #12]
 8002902:	2208      	movs	r2, #8
 8002904:	4619      	mov	r1, r3
 8002906:	f000 fc21 	bl	800314c <xMBUtilGetBits>
 800290a:	4603      	mov	r3, r0
 800290c:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 800290e:	8b7b      	ldrh	r3, [r7, #26]
 8002910:	3b01      	subs	r3, #1
 8002912:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 8002914:	8b7b      	ldrh	r3, [r7, #26]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e9      	bne.n	80028ee <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3b01      	subs	r3, #1
 800291e:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8002920:	883b      	ldrh	r3, [r7, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	883b      	ldrh	r3, [r7, #0]
 8002930:	f1c3 0308 	rsb	r3, r3, #8
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	b2da      	uxtb	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	883b      	ldrh	r3, [r7, #0]
 8002946:	f1c3 0308 	rsb	r3, r3, #8
 800294a:	fa42 f303 	asr.w	r3, r2, r3
 800294e:	b2da      	uxtb	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e001      	b.n	800295a <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 8002956:	2301      	movs	r3, #1
 8002958:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 800295a:	7ffb      	ldrb	r3, [r7, #31]
#else
	return MB_ENOREG;
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	3724      	adds	r7, #36	; 0x24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	2000019c 	.word	0x2000019c
 8002968:	200000a8 	.word	0x200000a8

0800296c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d16c      	bne.n	8002a5c <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3301      	adds	r3, #1
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3302      	adds	r3, #2
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	8abb      	ldrh	r3, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800299c:	8abb      	ldrh	r3, [r7, #20]
 800299e:	3301      	adds	r3, #1
 80029a0:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3303      	adds	r3, #3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	8a7b      	ldrh	r3, [r7, #18]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80029bc:	8a7b      	ldrh	r3, [r7, #18]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d049      	beq.n	8002a56 <eMBFuncReadCoils+0xea>
 80029c2:	8a7b      	ldrh	r3, [r7, #18]
 80029c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80029c8:	d245      	bcs.n	8002a56 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	60fa      	str	r2, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80029ea:	8a7b      	ldrh	r3, [r7, #18]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80029f4:	8a7b      	ldrh	r3, [r7, #18]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
 8002a00:	e003      	b.n	8002a0a <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8002a02:	8a7b      	ldrh	r3, [r7, #18]
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	7dfa      	ldrb	r2, [r7, #23]
 8002a12:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8002a20:	8a7a      	ldrh	r2, [r7, #18]
 8002a22:	8ab9      	ldrh	r1, [r7, #20]
 8002a24:	2300      	movs	r3, #0
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff ff18 	bl	800285c <eMBRegCoilsCB>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fbc0 	bl	80031be <prveMBError2Exception>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002a42:	e00d      	b.n	8002a60 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002a54:	e004      	b.n	8002a60 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a56:	2303      	movs	r3, #3
 8002a58:	75bb      	strb	r3, [r7, #22]
 8002a5a:	e001      	b.n	8002a60 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002a60:	7dbb      	ldrb	r3, [r7, #22]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <eMBFuncWriteCoil>:
#endif

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d140      	bne.n	8002b02 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3302      	adds	r3, #2
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	89bb      	ldrh	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d128      	bne.n	8002afc <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3303      	adds	r3, #3
 8002aae:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d004      	beq.n	8002abe <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3303      	adds	r3, #3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11e      	bne.n	8002afc <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2bff      	cmp	r3, #255	; 0xff
 8002aca:	d102      	bne.n	8002ad2 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	723b      	strb	r3, [r7, #8]
 8002ad0:	e001      	b.n	8002ad6 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8002ad6:	89b9      	ldrh	r1, [r7, #12]
 8002ad8:	f107 0008 	add.w	r0, r7, #8
 8002adc:	2301      	movs	r3, #1
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f7ff febc 	bl	800285c <eMBRegCoilsCB>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fb64 	bl	80031be <prveMBError2Exception>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002afa:	e004      	b.n	8002b06 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002afc:	2303      	movs	r3, #3
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e001      	b.n	8002b06 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002b02:	2303      	movs	r3, #3
 8002b04:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d954      	bls.n	8002bd0 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3302      	adds	r3, #2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	89bb      	ldrh	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002b40:	89bb      	ldrh	r3, [r7, #12]
 8002b42:	3301      	adds	r3, #1
 8002b44:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	795b      	ldrb	r3, [r3, #5]
 8002b64:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8002b70:	897b      	ldrh	r3, [r7, #10]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e003      	b.n	8002b86 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01e      	beq.n	8002bca <eMBFuncWriteMultipleCoils+0xba>
 8002b8c:	897b      	ldrh	r3, [r7, #10]
 8002b8e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8002b92:	d81a      	bhi.n	8002bca <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	7a7b      	ldrb	r3, [r7, #9]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d116      	bne.n	8002bca <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1d98      	adds	r0, r3, #6
 8002ba0:	897a      	ldrh	r2, [r7, #10]
 8002ba2:	89b9      	ldrh	r1, [r7, #12]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f7ff fe59 	bl	800285c <eMBRegCoilsCB>
 8002baa:	4603      	mov	r3, r0
 8002bac:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002bae:	7a3b      	ldrb	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002bb4:	7a3b      	ldrb	r3, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fb01 	bl	80031be <prveMBError2Exception>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8002bc0:	e008      	b.n	8002bd4 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2205      	movs	r2, #5
 8002bc6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002bc8:	e004      	b.n	8002bd4 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73bb      	strb	r3, [r7, #14]
 8002bce:	e001      	b.n	8002bd4 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8002bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d16c      	bne.n	8002cce <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3302      	adds	r3, #2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	8abb      	ldrh	r3, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002c0e:	8abb      	ldrh	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3303      	adds	r3, #3
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	8a7b      	ldrh	r3, [r7, #18]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8002c2e:	8a7b      	ldrh	r3, [r7, #18]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d049      	beq.n	8002cc8 <eMBFuncReadDiscreteInputs+0xea>
 8002c34:	8a7b      	ldrh	r3, [r7, #18]
 8002c36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c3a:	d245      	bcs.n	8002cc8 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	60fa      	str	r2, [r7, #12]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8002c5c:	8a7b      	ldrh	r3, [r7, #18]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8002c66:	8a7b      	ldrh	r3, [r7, #18]
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
 8002c72:	e003      	b.n	8002c7c <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8002c74:	8a7b      	ldrh	r3, [r7, #18]
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	60fa      	str	r2, [r7, #12]
 8002c82:	7dfa      	ldrb	r2, [r7, #23]
 8002c84:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8002c92:	8a7a      	ldrh	r2, [r7, #18]
 8002c94:	8abb      	ldrh	r3, [r7, #20]
 8002c96:	4619      	mov	r1, r3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff fdf3 	bl	8002884 <eMBRegDiscreteCB>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fa87 	bl	80031be <prveMBError2Exception>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8002cb4:	e00d      	b.n	8002cd2 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002cc6:	e004      	b.n	8002cd2 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	75bb      	strb	r3, [r7, #22]
 8002ccc:	e001      	b.n	8002cd2 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8002cd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d122      	bne.n	8002d38 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3302      	adds	r3, #2
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	89bb      	ldrh	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002d0c:	89bb      	ldrh	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	1cd8      	adds	r0, r3, #3
 8002d16:	89b9      	ldrh	r1, [r7, #12]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f7ff fd18 	bl	8002750 <eMBRegHoldingCB>
 8002d20:	4603      	mov	r3, r0
 8002d22:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8002d24:	7afb      	ldrb	r3, [r7, #11]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fa46 	bl	80031be <prveMBError2Exception>
 8002d32:	4603      	mov	r3, r0
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e001      	b.n	8002d3c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d946      	bls.n	8002dea <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	89bb      	ldrh	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8002d76:	89bb      	ldrh	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3303      	adds	r3, #3
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	897b      	ldrh	r3, [r7, #10]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	795b      	ldrb	r3, [r3, #5]
 8002d9a:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d020      	beq.n	8002de4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	2b78      	cmp	r3, #120	; 0x78
 8002da6:	d81d      	bhi.n	8002de4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8002db0:	7a7a      	ldrb	r2, [r7, #9]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d116      	bne.n	8002de4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1d98      	adds	r0, r3, #6
 8002dba:	897a      	ldrh	r2, [r7, #10]
 8002dbc:	89b9      	ldrh	r1, [r7, #12]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f7ff fcc6 	bl	8002750 <eMBRegHoldingCB>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002dc8:	7a3b      	ldrb	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002dce:	7a3b      	ldrb	r3, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f9f4 	bl	80031be <prveMBError2Exception>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8002dda:	e008      	b.n	8002dee <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2205      	movs	r2, #5
 8002de0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002de2:	e004      	b.n	8002dee <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002de4:	2303      	movs	r3, #3
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e001      	b.n	8002dee <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002dea:	2303      	movs	r3, #3
 8002dec:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d15f      	bne.n	8002ece <eMBFuncReadHoldingRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3301      	adds	r3, #1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	8abb      	ldrh	r3, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8002e28:	8abb      	ldrh	r3, [r7, #20]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3303      	adds	r3, #3
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	8a7b      	ldrh	r3, [r7, #18]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03c      	beq.n	8002ec8 <eMBFuncReadHoldingRegister+0xd0>
 8002e4e:	8a7b      	ldrh	r3, [r7, #18]
 8002e50:	2b7d      	cmp	r3, #125	; 0x7d
 8002e52:	d839      	bhi.n	8002ec8 <eMBFuncReadHoldingRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	60fa      	str	r2, [r7, #12]
 8002e64:	2203      	movs	r2, #3
 8002e66:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8002e74:	8a7b      	ldrh	r3, [r7, #18]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	60f9      	str	r1, [r7, #12]
 8002e7e:	0052      	lsls	r2, r2, #1
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8002e90:	8a7a      	ldrh	r2, [r7, #18]
 8002e92:	8ab9      	ldrh	r1, [r7, #20]
 8002e94:	2300      	movs	r3, #0
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff fc5a 	bl	8002750 <eMBRegHoldingCB>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <eMBFuncReadHoldingRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f988 	bl	80031be <prveMBError2Exception>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8002eb2:	e00e      	b.n	8002ed2 <eMBFuncReadHoldingRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	8a7b      	ldrh	r3, [r7, #18]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8002ec6:	e004      	b.n	8002ed2 <eMBFuncReadHoldingRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	e001      	b.n	8002ed2 <eMBFuncReadHoldingRegister+0xda>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	f240 8099 	bls.w	8003026 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3302      	adds	r3, #2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	8abb      	ldrh	r3, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8002f0e:	8abb      	ldrh	r3, [r7, #20]
 8002f10:	3301      	adds	r3, #1
 8002f12:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3303      	adds	r3, #3
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	8a7b      	ldrh	r3, [r7, #18]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3305      	adds	r3, #5
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3306      	adds	r3, #6
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	8a3b      	ldrh	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8002f48:	8a3b      	ldrh	r3, [r7, #16]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3307      	adds	r3, #7
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7a5b      	ldrb	r3, [r3, #9]
 8002f6c:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8002f6e:	8a7b      	ldrh	r3, [r7, #18]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d056      	beq.n	8003022 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8002f74:	8a7b      	ldrh	r3, [r7, #18]
 8002f76:	2b7d      	cmp	r3, #125	; 0x7d
 8002f78:	d853      	bhi.n	8003022 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d050      	beq.n	8003022 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	2b79      	cmp	r3, #121	; 0x79
 8002f84:	d84d      	bhi.n	8003022 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	005a      	lsls	r2, r3, #1
 8002f8a:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d148      	bne.n	8003022 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f103 000a 	add.w	r0, r3, #10
 8002f96:	89fa      	ldrh	r2, [r7, #14]
 8002f98:	8a39      	ldrh	r1, [r7, #16]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f7ff fbd8 	bl	8002750 <eMBRegHoldingCB>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8002fa4:	7dbb      	ldrb	r3, [r7, #22]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d131      	bne.n	800300e <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	60ba      	str	r2, [r7, #8]
 8002fba:	2217      	movs	r2, #23
 8002fbc:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8002fca:	8a7b      	ldrh	r3, [r7, #18]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	0052      	lsls	r2, r2, #1
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8002fe6:	8a7a      	ldrh	r2, [r7, #18]
 8002fe8:	8ab9      	ldrh	r1, [r7, #20]
 8002fea:	2300      	movs	r3, #0
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f7ff fbaf 	bl	8002750 <eMBRegHoldingCB>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8002ff6:	7dbb      	ldrb	r3, [r7, #22]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d108      	bne.n	800300e <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	8a7b      	ldrh	r3, [r7, #18]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	b29b      	uxth	r3, r3
 8003006:	4413      	add	r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800300e:	7dbb      	ldrb	r3, [r7, #22]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003014:	7dbb      	ldrb	r3, [r7, #22]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f8d1 	bl	80031be <prveMBError2Exception>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003020:	e001      	b.n	8003026 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003022:	2303      	movs	r3, #3
 8003024:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	2b05      	cmp	r3, #5
 8003044:	d15f      	bne.n	8003106 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3301      	adds	r3, #1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3302      	adds	r3, #2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b29a      	uxth	r2, r3
 800305a:	8abb      	ldrh	r3, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003060:	8abb      	ldrh	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3303      	adds	r3, #3
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b29a      	uxth	r2, r3
 800307a:	8a7b      	ldrh	r3, [r7, #18]
 800307c:	4313      	orrs	r3, r2
 800307e:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8003080:	8a7b      	ldrh	r3, [r7, #18]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03c      	beq.n	8003100 <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8003086:	8a7b      	ldrh	r3, [r7, #18]
 8003088:	2b7c      	cmp	r3, #124	; 0x7c
 800308a:	d839      	bhi.n	8003100 <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	2204      	movs	r2, #4
 800309e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80030ac:	8a7b      	ldrh	r3, [r7, #18]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	60f9      	str	r1, [r7, #12]
 80030b6:	0052      	lsls	r2, r2, #1
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 80030c8:	8a7a      	ldrh	r2, [r7, #18]
 80030ca:	8abb      	ldrh	r3, [r7, #20]
 80030cc:	4619      	mov	r1, r3
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff faea 	bl	80026a8 <eMBRegInputCB>
 80030d4:	4603      	mov	r3, r0
 80030d6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d006      	beq.n	80030ec <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80030de:	7afb      	ldrb	r3, [r7, #11]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f86c 	bl	80031be <prveMBError2Exception>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80030ea:	e00e      	b.n	800310a <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	8a7b      	ldrh	r3, [r7, #18]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 80030fe:	e004      	b.n	800310a <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003100:	2303      	movs	r3, #3
 8003102:	75fb      	strb	r3, [r7, #23]
 8003104:	e001      	b.n	800310a <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003106:	2303      	movs	r3, #3
 8003108:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3301      	adds	r3, #1
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <eMBFuncReportSlaveID+0x30>)
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <eMBFuncReportSlaveID+0x34>)
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fd13 	bl	8003b54 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <eMBFuncReportSlaveID+0x30>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200000d0 	.word	0x200000d0
 8003148:	200000b0 	.word	0x200000b0

0800314c <xMBUtilGetBits>:
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
}

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	b29b      	uxth	r3, r3
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800316e:	787b      	ldrb	r3, [r7, #1]
 8003170:	2201      	movs	r2, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800317c:	89fb      	ldrh	r3, [r7, #14]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	3301      	adds	r3, #1
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	b21a      	sxth	r2, r3
 8003194:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003198:	4313      	orrs	r3, r2
 800319a:	b21b      	sxth	r3, r3
 800319c:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 800319e:	893a      	ldrh	r2, [r7, #8]
 80031a0:	89bb      	ldrh	r3, [r7, #12]
 80031a2:	fa42 f303 	asr.w	r3, r2, r3
 80031a6:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80031a8:	893a      	ldrh	r2, [r7, #8]
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	4013      	ands	r3, r2
 80031ae:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	b2db      	uxtb	r3, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	2b07      	cmp	r3, #7
 80031cc:	d00c      	beq.n	80031e8 <prveMBError2Exception+0x2a>
 80031ce:	2b07      	cmp	r3, #7
 80031d0:	dc0d      	bgt.n	80031ee <prveMBError2Exception+0x30>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <prveMBError2Exception+0x1e>
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d003      	beq.n	80031e2 <prveMBError2Exception+0x24>
 80031da:	e008      	b.n	80031ee <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
            break;
 80031e0:	e008      	b.n	80031f4 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80031e2:	2302      	movs	r3, #2
 80031e4:	73fb      	strb	r3, [r7, #15]
            break;
 80031e6:	e005      	b.n	80031f4 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80031e8:	2306      	movs	r3, #6
 80031ea:	73fb      	strb	r3, [r7, #15]
            break;
 80031ec:	e002      	b.n	80031f4 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80031ee:	2304      	movs	r3, #4
 80031f0:	73fb      	strb	r3, [r7, #15]
            break;
 80031f2:	bf00      	nop
    }

    return eStatus;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60ba      	str	r2, [r7, #8]
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4603      	mov	r3, r0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	460b      	mov	r3, r1
 8003210:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <eMBInit+0x28>
 800321c:	7bbb      	ldrb	r3, [r7, #14]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <eMBInit+0x28>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8003222:	7bbb      	ldrb	r3, [r7, #14]
 8003224:	2bf7      	cmp	r3, #247	; 0xf7
 8003226:	d902      	bls.n	800322e <eMBInit+0x2e>
    {
        eStatus = MB_EINVAL;
 8003228:	2302      	movs	r3, #2
 800322a:	75fb      	strb	r3, [r7, #23]
 800322c:	e03b      	b.n	80032a6 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <eMBInit+0xb0>)
 8003230:	7bbb      	ldrb	r3, [r7, #14]
 8003232:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d121      	bne.n	800327e <eMBInit+0x7e>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800323a:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <eMBInit+0xb4>)
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <eMBInit+0xb8>)
 800323e:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8003240:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <eMBInit+0xbc>)
 8003242:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <eMBInit+0xc0>)
 8003244:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8003246:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <eMBInit+0xc4>)
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <eMBInit+0xc8>)
 800324a:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <eMBInit+0xcc>)
 800324e:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <eMBInit+0xd0>)
 8003250:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <eMBInit+0xd4>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <eMBInit+0xd8>)
 800325a:	4a20      	ldr	r2, [pc, #128]	; (80032dc <eMBInit+0xdc>)
 800325c:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <eMBInit+0xe0>)
 8003260:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <eMBInit+0xe4>)
 8003262:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <eMBInit+0xe8>)
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <eMBInit+0xec>)
 8003268:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, dHUART, ulBaudRate, dHTIM );
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <eMBInit+0xb0>)
 800326c:	7818      	ldrb	r0, [r3, #0]
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	f000 fa96 	bl	80037a4 <eMBRTUInit>
 8003278:	4603      	mov	r3, r0
 800327a:	75fb      	strb	r3, [r7, #23]
            break;
 800327c:	e002      	b.n	8003284 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, dHUART, ulBaudRate, dHTIM );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 800327e:	2302      	movs	r3, #2
 8003280:	75fb      	strb	r3, [r7, #23]
            break;
 8003282:	bf00      	nop
        }

        if( eStatus == MB_ENOERR )
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 800328a:	f000 f93b 	bl	8003504 <xMBPortEventInit>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8003294:	2303      	movs	r3, #3
 8003296:	75fb      	strb	r3, [r7, #23]
 8003298:	e005      	b.n	80032a6 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 800329a:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <eMBInit+0xf0>)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <eMBInit+0xf4>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	200000d2 	.word	0x200000d2
 80032b4:	200000d8 	.word	0x200000d8
 80032b8:	08003815 	.word	0x08003815
 80032bc:	200000dc 	.word	0x200000dc
 80032c0:	0800383d 	.word	0x0800383d
 80032c4:	200000d4 	.word	0x200000d4
 80032c8:	080038c9 	.word	0x080038c9
 80032cc:	200000e0 	.word	0x200000e0
 80032d0:	08003859 	.word	0x08003859
 80032d4:	200000e4 	.word	0x200000e4
 80032d8:	200001c0 	.word	0x200001c0
 80032dc:	08003991 	.word	0x08003991
 80032e0:	200001b8 	.word	0x200001b8
 80032e4:	08003a3d 	.word	0x08003a3d
 80032e8:	200001bc 	.word	0x200001bc
 80032ec:	08003ab5 	.word	0x08003ab5
 80032f0:	200000d3 	.word	0x200000d3
 80032f4:	20000009 	.word	0x20000009

080032f8 <eMBEnable>:
}


eMBErrorCode
eMBEnable( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80032fe:	2300      	movs	r3, #0
 8003300:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <eMBEnable+0x30>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <eMBEnable+0x34>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <eMBEnable+0x30>)
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e001      	b.n	800331c <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8003318:	2306      	movs	r3, #6
 800331a:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 800331c:	79fb      	ldrb	r3, [r7, #7]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000009 	.word	0x20000009
 800332c:	200000d8 	.word	0x200000d8

08003330 <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8003336:	2300      	movs	r3, #0
 8003338:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800333a:	4b56      	ldr	r3, [pc, #344]	; (8003494 <eMBPoll+0x164>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8003342:	2306      	movs	r3, #6
 8003344:	e0a1      	b.n	800348a <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8003346:	1cbb      	adds	r3, r7, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f8fd 	bl	8003548 <xMBPortEventGet>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	f040 8094 	bne.w	800347e <eMBPoll+0x14e>
    {
        switch ( eEvent )
 8003356:	78bb      	ldrb	r3, [r7, #2]
 8003358:	3b01      	subs	r3, #1
 800335a:	2b07      	cmp	r3, #7
 800335c:	f200 8094 	bhi.w	8003488 <eMBPoll+0x158>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <eMBPoll+0x38>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	08003489 	.word	0x08003489
 800336c:	08003389 	.word	0x08003389
 8003370:	08003489 	.word	0x08003489
 8003374:	080033bb 	.word	0x080033bb
 8003378:	08003489 	.word	0x08003489
 800337c:	08003489 	.word	0x08003489
 8003380:	08003489 	.word	0x08003489
 8003384:	08003489 	.word	0x08003489
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <eMBPoll+0x168>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a43      	ldr	r2, [pc, #268]	; (800349c <eMBPoll+0x16c>)
 800338e:	4944      	ldr	r1, [pc, #272]	; (80034a0 <eMBPoll+0x170>)
 8003390:	4844      	ldr	r0, [pc, #272]	; (80034a4 <eMBPoll+0x174>)
 8003392:	4798      	blx	r3
 8003394:	4603      	mov	r3, r0
 8003396:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d171      	bne.n	8003482 <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <eMBPoll+0x174>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <eMBPoll+0x178>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d003      	beq.n	80033b2 <eMBPoll+0x82>
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <eMBPoll+0x174>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d167      	bne.n	8003482 <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80033b2:	2004      	movs	r0, #4
 80033b4:	f000 f8b2 	bl	800351c <xMBPortEventPost>
                }
            }
            break;
 80033b8:	e063      	b.n	8003482 <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <eMBPoll+0x170>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <eMBPoll+0x17c>)
 80033c2:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80033c4:	4b3a      	ldr	r3, [pc, #232]	; (80034b0 <eMBPoll+0x180>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	e01f      	b.n	8003410 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80033d0:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <eMBPoll+0x184>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01d      	beq.n	8003418 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80033dc:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <eMBPoll+0x184>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <eMBPoll+0x17c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10e      	bne.n	800340a <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80033ec:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <eMBPoll+0x184>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <eMBPoll+0x170>)
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	4928      	ldr	r1, [pc, #160]	; (800349c <eMBPoll+0x16c>)
 80033fc:	4610      	mov	r0, r2
 80033fe:	4798      	blx	r3
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <eMBPoll+0x180>)
 8003406:	701a      	strb	r2, [r3, #0]
                    break;
 8003408:	e007      	b.n	800341a <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3301      	adds	r3, #1
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b0f      	cmp	r3, #15
 8003414:	dddc      	ble.n	80033d0 <eMBPoll+0xa0>
 8003416:	e000      	b.n	800341a <eMBPoll+0xea>
                    break;
 8003418:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <eMBPoll+0x174>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d031      	beq.n	8003486 <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <eMBPoll+0x180>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01d      	beq.n	8003466 <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <eMBPoll+0x16c>)
 800342c:	2200      	movs	r2, #0
 800342e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <eMBPoll+0x17c>)
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <eMBPoll+0x170>)
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <eMBPoll+0x16c>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	1c58      	adds	r0, r3, #1
 800343e:	b284      	uxth	r4, r0
 8003440:	4816      	ldr	r0, [pc, #88]	; (800349c <eMBPoll+0x16c>)
 8003442:	8004      	strh	r4, [r0, #0]
 8003444:	440b      	add	r3, r1
 8003446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <eMBPoll+0x170>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <eMBPoll+0x16c>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	1c59      	adds	r1, r3, #1
 8003458:	b288      	uxth	r0, r1
 800345a:	4910      	ldr	r1, [pc, #64]	; (800349c <eMBPoll+0x16c>)
 800345c:	8008      	strh	r0, [r1, #0]
 800345e:	4413      	add	r3, r2
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <eMBPoll+0x180>)
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	701a      	strb	r2, [r3, #0]
                }
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <eMBPoll+0x188>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <eMBPoll+0x178>)
 800346c:	7810      	ldrb	r0, [r2, #0]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <eMBPoll+0x170>)
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <eMBPoll+0x16c>)
 8003474:	8812      	ldrh	r2, [r2, #0]
 8003476:	4798      	blx	r3
 8003478:	4603      	mov	r3, r0
 800347a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800347c:	e003      	b.n	8003486 <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <eMBPoll+0x158>
            break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <eMBPoll+0x158>
            break;
 8003486:	bf00      	nop
    return MB_ENOERR;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	bf00      	nop
 8003494:	20000009 	.word	0x20000009
 8003498:	200000e0 	.word	0x200000e0
 800349c:	200000f0 	.word	0x200000f0
 80034a0:	200000ec 	.word	0x200000ec
 80034a4:	200000e8 	.word	0x200000e8
 80034a8:	200000d2 	.word	0x200000d2
 80034ac:	200000f2 	.word	0x200000f2
 80034b0:	200000f3 	.word	0x200000f3
 80034b4:	2000000c 	.word	0x2000000c
 80034b8:	200000d4 	.word	0x200000d4

080034bc <__critical_enter>:
#include "main.h"

static uint32_t lock_count = 0;

void __critical_enter(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80034c0:	b672      	cpsid	i
}
 80034c2:	bf00      	nop
	__disable_irq();
	lock_count++;
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__critical_enter+0x1c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <__critical_enter+0x1c>)
 80034cc:	6013      	str	r3, [r2, #0]
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	200000f4 	.word	0x200000f4

080034dc <__critical_exit>:

void __critical_exit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	lock_count--;
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <__critical_exit+0x24>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	4a06      	ldr	r2, [pc, #24]	; (8003500 <__critical_exit+0x24>)
 80034e8:	6013      	str	r3, [r2, #0]
	if (lock_count == 0)
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <__critical_exit+0x24>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80034f2:	b662      	cpsie	i
}
 80034f4:	bf00      	nop
		__enable_irq();
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	200000f4 	.word	0x200000f4

08003504 <xMBPortEventInit>:
static eMBEventType eQueuedEvent;
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortEventInit( void )
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <xMBPortEventInit+0x14>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	200000f9 	.word	0x200000f9

0800351c <xMBPortEventPost>:

BOOL xMBPortEventPost( eMBEventType eEvent )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <xMBPortEventPost+0x24>)
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 800352c:	4a05      	ldr	r2, [pc, #20]	; (8003544 <xMBPortEventPost+0x28>)
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8003532:	2301      	movs	r3, #1
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	200000f9 	.word	0x200000f9
 8003544:	200000f8 	.word	0x200000f8

08003548 <xMBPortEventGet>:

BOOL xMBPortEventGet( eMBEventType * eEvent )
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <xMBPortEventGet+0x34>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <xMBPortEventGet+0x38>)
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <xMBPortEventGet+0x34>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	200000f9 	.word	0x200000f9
 8003580:	200000f8 	.word	0x200000f8

08003584 <xMBPortSerialInit>:
#define RS485_RTS_HIGH 	HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_SET)


/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortSerialInit( void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
	uart = (UART_HandleTypeDef *)dHUART;
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <xMBPortSerialInit+0x20>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6013      	str	r3, [r2, #0]

	return TRUE;
 8003596:	2301      	movs	r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	200001cc 	.word	0x200001cc

080035a8 <vMBPortSerialEnable>:

void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	460a      	mov	r2, r1
 80035b2:	71fb      	strb	r3, [r7, #7]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71bb      	strb	r3, [r7, #6]
	if(xRxEnable)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00d      	beq.n	80035da <vMBPortSerialEnable+0x32>
	{
		RS485_RTS_LOW;
 80035be:	2200      	movs	r2, #0
 80035c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035c4:	4812      	ldr	r0, [pc, #72]	; (8003610 <vMBPortSerialEnable+0x68>)
 80035c6:	f7fd fbc2 	bl	8000d4e <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(uart, &singlechar, 1);
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <vMBPortSerialEnable+0x6c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4911      	ldr	r1, [pc, #68]	; (8003618 <vMBPortSerialEnable+0x70>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fb69 	bl	8001caa <HAL_UART_Receive_IT>
 80035d8:	e004      	b.n	80035e4 <vMBPortSerialEnable+0x3c>
	}	
	else
	{
		HAL_UART_AbortReceive_IT(uart);
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <vMBPortSerialEnable+0x6c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fbe4 	bl	8001dac <HAL_UART_AbortReceive_IT>
	}

	if(xTxEnable)
 80035e4:	79bb      	ldrb	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <vMBPortSerialEnable+0x56>
	{
		RS485_RTS_HIGH;
 80035ea:	2201      	movs	r2, #1
 80035ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035f0:	4807      	ldr	r0, [pc, #28]	; (8003610 <vMBPortSerialEnable+0x68>)
 80035f2:	f7fd fbac 	bl	8000d4e <HAL_GPIO_WritePin>
		pxMBFrameCBTransmitterEmpty();
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <vMBPortSerialEnable+0x74>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4798      	blx	r3
	}
	else
	{
		HAL_UART_AbortTransmit_IT(uart);
	}
}
 80035fc:	e004      	b.n	8003608 <vMBPortSerialEnable+0x60>
		HAL_UART_AbortTransmit_IT(uart);
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <vMBPortSerialEnable+0x6c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fb82 	bl	8001d0c <HAL_UART_AbortTransmit_IT>
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40010800 	.word	0x40010800
 8003614:	200001cc 	.word	0x200001cc
 8003618:	200000fa 	.word	0x200000fa
 800361c:	200001b8 	.word	0x200001b8

08003620 <xMBPortSerialPutBytes>:
	HAL_UART_Transmit_IT(uart, (uint8_t*)&ucByte, 1);
	return TRUE;
}

BOOL xMBPortSerialPutBytes(volatile UCHAR *ucByte, USHORT usSize)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(uart, (uint8_t *)ucByte, usSize);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <xMBPortSerialPutBytes+0x24>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe faf4 	bl	8001c22 <HAL_UART_Transmit_IT>
	return TRUE;
 800363a:	2301      	movs	r3, #1
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200001cc 	.word	0x200001cc

08003648 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	*pucByte = (uint8_t)(singlechar);
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <xMBPortSerialGetByte+0x1c>)
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	200000fa 	.word	0x200000fa

08003668 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart->Instance)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_UART_RxCpltCallback+0x34>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d109      	bne.n	8003692 <HAL_UART_RxCpltCallback+0x2a>
	{
		pxMBFrameCBByteReceived();
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <HAL_UART_RxCpltCallback+0x38>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4798      	blx	r3
		HAL_UART_Receive_IT(uart, &singlechar, 1);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_UART_RxCpltCallback+0x34>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	4906      	ldr	r1, [pc, #24]	; (80036a4 <HAL_UART_RxCpltCallback+0x3c>)
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fb0c 	bl	8001caa <HAL_UART_Receive_IT>
	}
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	200001cc 	.word	0x200001cc
 80036a0:	200001c0 	.word	0x200001c0
 80036a4:	200000fa 	.word	0x200000fa

080036a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart->Instance)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_UART_TxCpltCallback+0x24>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d102      	bne.n	80036c4 <HAL_UART_TxCpltCallback+0x1c>
	{
		pxMBFrameCBTransmitterEmpty();
 80036be:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_UART_TxCpltCallback+0x28>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4798      	blx	r3
	}
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200001cc 	.word	0x200001cc
 80036d0:	200001b8 	.word	0x200001b8

080036d4 <xMBPortTimersInit>:
static uint16_t timeout = 0;
volatile uint16_t counter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit( USHORT usTim1Timerout50us, void *dHTIM )
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	80fb      	strh	r3, [r7, #6]
	tim = (TIM_HandleTypeDef *)dHTIM;
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <xMBPortTimersInit+0x24>)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6013      	str	r3, [r2, #0]
	timeout = usTim1Timerout50us;
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <xMBPortTimersInit+0x28>)
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	8013      	strh	r3, [r2, #0]
	return TRUE;
 80036ec:	2301      	movs	r3, #1
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	200001d0 	.word	0x200001d0
 80036fc:	200000fc 	.word	0x200000fc

08003700 <vMBPortTimersEnable>:

inline void vMBPortTimersEnable(  )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	counter=0;
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <vMBPortTimersEnable+0x18>)
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim);
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <vMBPortTimersEnable+0x1c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd ffa0 	bl	8001654 <HAL_TIM_Base_Start_IT>
}
 8003714:	bf00      	nop
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200000fe 	.word	0x200000fe
 800371c:	200001d0 	.word	0x200001d0

08003720 <vMBPortTimersDisable>:

inline void vMBPortTimersDisable(  )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(tim);
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <vMBPortTimersDisable+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fd ffe5 	bl	80016f8 <HAL_TIM_Base_Stop_IT>
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200001d0 	.word	0x200001d0

08003738 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8003744:	23ff      	movs	r3, #255	; 0xff
 8003746:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8003748:	23ff      	movs	r3, #255	; 0xff
 800374a:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800374c:	e013      	b.n	8003776 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	4053      	eors	r3, r2
 800375a:	b2db      	uxtb	r3, r3
 800375c:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800375e:	4a0f      	ldr	r2, [pc, #60]	; (800379c <usMBCRC16+0x64>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4413      	add	r3, r2
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	4053      	eors	r3, r2
 800376a:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <usMBCRC16+0x68>)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	807a      	strh	r2, [r7, #2]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	b21a      	sxth	r2, r3
 8003786:	7bbb      	ldrb	r3, [r7, #14]
 8003788:	b21b      	sxth	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b21b      	sxth	r3, r3
 800378e:	b29b      	uxth	r3, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	08003bc0 	.word	0x08003bc0
 80037a0:	08003cc0 	.word	0x08003cc0

080037a4 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eStatus = MB_ENOERR;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 80037b8:	f7ff fe80 	bl	80034bc <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( dHUART, ulBaudRate, dHTIM ) != TRUE )
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	68b8      	ldr	r0, [r7, #8]
 80037c2:	f7ff fedf 	bl	8003584 <xMBPortSerialInit>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d002      	beq.n	80037d2 <eMBRTUInit+0x2e>
    {
        eStatus = MB_EPORTERR;
 80037cc:	2303      	movs	r3, #3
 80037ce:	75fb      	strb	r3, [r7, #23]
 80037d0:	e017      	b.n	8003802 <eMBRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80037d8:	d902      	bls.n	80037e0 <eMBRTUInit+0x3c>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80037da:	2323      	movs	r3, #35	; 0x23
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e005      	b.n	80037ec <eMBRTUInit+0x48>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <eMBRTUInit+0x6c>)
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	613b      	str	r3, [r7, #16]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us, dHTIM ) != TRUE )
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	6839      	ldr	r1, [r7, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff6e 	bl	80036d4 <xMBPortTimersInit>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <eMBRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 80037fe:	2303      	movs	r3, #3
 8003800:	75fb      	strb	r3, [r7, #23]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8003802:	f7ff fe6b 	bl	80034dc <__critical_exit>

    return eStatus;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	00177fa0 	.word	0x00177fa0

08003814 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8003818:	f7ff fe50 	bl	80034bc <__critical_enter>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <eMBRTUStart+0x24>)
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8003822:	2100      	movs	r1, #0
 8003824:	2001      	movs	r0, #1
 8003826:	f7ff febf 	bl	80035a8 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800382a:	f7ff ff69 	bl	8003700 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800382e:	f7ff fe55 	bl	80034dc <__critical_exit>
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000101 	.word	0x20000101

0800383c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8003840:	f7ff fe3c 	bl	80034bc <__critical_enter>
    vMBPortSerialEnable( FALSE, FALSE );
 8003844:	2100      	movs	r1, #0
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff feae 	bl	80035a8 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800384c:	f7ff ff68 	bl	8003720 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8003850:	f7ff fe44 	bl	80034dc <__critical_exit>
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}

08003858 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003864:	2300      	movs	r3, #0
 8003866:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8003868:	f7ff fe28 	bl	80034bc <__critical_enter>
    assert_param( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <eMBRTUReceive+0x64>)
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d919      	bls.n	80038aa <eMBRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <eMBRTUReceive+0x64>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4619      	mov	r1, r3
 800387e:	4810      	ldr	r0, [pc, #64]	; (80038c0 <eMBRTUReceive+0x68>)
 8003880:	f7ff ff5a 	bl	8003738 <usMBCRC16>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <eMBRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <eMBRTUReceive+0x68>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <eMBRTUReceive+0x64>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b03      	subs	r3, #3
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <eMBRTUReceive+0x6c>)
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e001      	b.n	80038ae <eMBRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 80038aa:	2305      	movs	r3, #5
 80038ac:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 80038ae:	f7ff fe15 	bl	80034dc <__critical_exit>
    return eStatus;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	2000010a 	.word	0x2000010a
 80038c0:	200001d4 	.word	0x200001d4
 80038c4:	200001d5 	.word	0x200001d5

080038c8 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	6039      	str	r1, [r7, #0]
 80038d2:	71fb      	strb	r3, [r7, #7]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 80038dc:	f7ff fdee 	bl	80034bc <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <eMBRTUSend+0xb4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d13f      	bne.n	800396a <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <eMBRTUSend+0xb8>)
 80038f0:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <eMBRTUSend+0xbc>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <eMBRTUSend+0xb8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	79fa      	ldrb	r2, [r7, #7]
 80038fe:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8003900:	4b20      	ldr	r3, [pc, #128]	; (8003984 <eMBRTUSend+0xbc>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29a      	uxth	r2, r3
 8003906:	88bb      	ldrh	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	b29a      	uxth	r2, r3
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <eMBRTUSend+0xbc>)
 800390e:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8003910:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <eMBRTUSend+0xb8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <eMBRTUSend+0xbc>)
 8003916:	8812      	ldrh	r2, [r2, #0]
 8003918:	b292      	uxth	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff0b 	bl	8003738 <usMBCRC16>
 8003922:	4603      	mov	r3, r0
 8003924:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <eMBRTUSend+0xbc>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	b291      	uxth	r1, r2
 8003930:	4a14      	ldr	r2, [pc, #80]	; (8003984 <eMBRTUSend+0xbc>)
 8003932:	8011      	strh	r1, [r2, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	89bb      	ldrh	r3, [r7, #12]
 8003938:	b2d9      	uxtb	r1, r3
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <eMBRTUSend+0xc0>)
 800393c:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800393e:	89bb      	ldrh	r3, [r7, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	b299      	uxth	r1, r3
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <eMBRTUSend+0xbc>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	b290      	uxth	r0, r2
 800394e:	4a0d      	ldr	r2, [pc, #52]	; (8003984 <eMBRTUSend+0xbc>)
 8003950:	8010      	strh	r0, [r2, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	b2c9      	uxtb	r1, r1
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <eMBRTUSend+0xc0>)
 8003958:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <eMBRTUSend+0xc4>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8003960:	2101      	movs	r1, #1
 8003962:	2000      	movs	r0, #0
 8003964:	f7ff fe20 	bl	80035a8 <vMBPortSerialEnable>
 8003968:	e001      	b.n	800396e <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800396a:	2305      	movs	r3, #5
 800396c:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800396e:	f7ff fdb5 	bl	80034dc <__critical_exit>
    return eStatus;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000101 	.word	0x20000101
 8003980:	20000104 	.word	0x20000104
 8003984:	20000108 	.word	0x20000108
 8003988:	200001d4 	.word	0x200001d4
 800398c:	20000100 	.word	0x20000100

08003990 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert_param( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800399a:	1dbb      	adds	r3, r7, #6
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fe53 	bl	8003648 <xMBPortSerialGetByte>

    switch ( eRcvState )
 80039a2:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <xMBRTUReceiveFSM+0xa0>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d83c      	bhi.n	8003a26 <xMBRTUReceiveFSM+0x96>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <xMBRTUReceiveFSM+0x24>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d1 	.word	0x080039d1
 80039bc:	080039f9 	.word	0x080039f9
 80039c0:	080039cb 	.word	0x080039cb
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable( );
 80039c4:	f7ff fe9c 	bl	8003700 <vMBPortTimersEnable>
        break;
 80039c8:	e02d      	b.n	8003a26 <xMBRTUReceiveFSM+0x96>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable( );
 80039ca:	f7ff fe99 	bl	8003700 <vMBPortTimersEnable>
        break;
 80039ce:	e02a      	b.n	8003a26 <xMBRTUReceiveFSM+0x96>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <xMBRTUReceiveFSM+0xa4>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <xMBRTUReceiveFSM+0xa4>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	b291      	uxth	r1, r2
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <xMBRTUReceiveFSM+0xa4>)
 80039e2:	8011      	strh	r1, [r2, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	79b9      	ldrb	r1, [r7, #6]
 80039e8:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <xMBRTUReceiveFSM+0xa8>)
 80039ea:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <xMBRTUReceiveFSM+0xa0>)
 80039ee:	2202      	movs	r2, #2
 80039f0:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable( );
 80039f2:	f7ff fe85 	bl	8003700 <vMBPortTimersEnable>
        break;
 80039f6:	e016      	b.n	8003a26 <xMBRTUReceiveFSM+0x96>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80039f8:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <xMBRTUReceiveFSM+0xa4>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d80b      	bhi.n	8003a1a <xMBRTUReceiveFSM+0x8a>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <xMBRTUReceiveFSM+0xa4>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	b291      	uxth	r1, r2
 8003a0c:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <xMBRTUReceiveFSM+0xa4>)
 8003a0e:	8011      	strh	r1, [r2, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	79b9      	ldrb	r1, [r7, #6]
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <xMBRTUReceiveFSM+0xa8>)
 8003a16:	5499      	strb	r1, [r3, r2]
 8003a18:	e002      	b.n	8003a20 <xMBRTUReceiveFSM+0x90>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <xMBRTUReceiveFSM+0xa0>)
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable();
 8003a20:	f7ff fe6e 	bl	8003700 <vMBPortTimersEnable>
        break;
 8003a24:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8003a26:	79fb      	ldrb	r3, [r7, #7]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000101 	.word	0x20000101
 8003a34:	2000010a 	.word	0x2000010a
 8003a38:	200001d4 	.word	0x200001d4

08003a3c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	71fb      	strb	r3, [r7, #7]

    assert_param( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <xMBRTUTransmitFSM+0x6c>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <xMBRTUTransmitFSM+0x1a>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d005      	beq.n	8003a60 <xMBRTUTransmitFSM+0x24>
 8003a54:	e023      	b.n	8003a9e <xMBRTUTransmitFSM+0x62>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8003a56:	2100      	movs	r1, #0
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f7ff fda5 	bl	80035a8 <vMBPortSerialEnable>
        break;
 8003a5e:	e01e      	b.n	8003a9e <xMBRTUTransmitFSM+0x62>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8003a60:	4b12      	ldr	r3, [pc, #72]	; (8003aac <xMBRTUTransmitFSM+0x70>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <xMBRTUTransmitFSM+0x48>
        {
#if SEND_ALL_BYTES_IN_ONE_CALL > 0
			xMBPortSerialPutBytes(pucSndBufferCur, usSndBufferCount);
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <xMBRTUTransmitFSM+0x74>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <xMBRTUTransmitFSM+0x70>)
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	b292      	uxth	r2, r2
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fdd2 	bl	8003620 <xMBPortSerialPutBytes>
			usSndBufferCount = 0;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <xMBRTUTransmitFSM+0x70>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8003a82:	e00b      	b.n	8003a9c <xMBRTUTransmitFSM+0x60>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8003a84:	2008      	movs	r0, #8
 8003a86:	f7ff fd49 	bl	800351c <xMBPortEventPost>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8003a8e:	2100      	movs	r1, #0
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7ff fd89 	bl	80035a8 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <xMBRTUTransmitFSM+0x6c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
        break;
 8003a9c:	bf00      	nop
    }

    return xNeedPoll;
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000100 	.word	0x20000100
 8003aac:	20000108 	.word	0x20000108
 8003ab0:	20000104 	.word	0x20000104

08003ab4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <xMBRTUTimerT35Expired+0x54>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d012      	beq.n	8003aee <xMBRTUTimerT35Expired+0x3a>
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	dc12      	bgt.n	8003af2 <xMBRTUTimerT35Expired+0x3e>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <xMBRTUTimerT35Expired+0x22>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d006      	beq.n	8003ae2 <xMBRTUTimerT35Expired+0x2e>

        /* Function called in an illegal state. */
    default:
        assert_param( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
         break;
 8003ad4:	e00d      	b.n	8003af2 <xMBRTUTimerT35Expired+0x3e>
        xNeedPoll = xMBPortEventPost( EV_READY );
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff fd20 	bl	800351c <xMBPortEventPost>
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
        break;
 8003ae0:	e008      	b.n	8003af4 <xMBRTUTimerT35Expired+0x40>
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f7ff fd1a 	bl	800351c <xMBPortEventPost>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
        break;
 8003aec:	e002      	b.n	8003af4 <xMBRTUTimerT35Expired+0x40>
        break;
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <xMBRTUTimerT35Expired+0x40>
         break;
 8003af2:	bf00      	nop
    }

    vMBPortTimersDisable(  );
 8003af4:	f7ff fe14 	bl	8003720 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <xMBRTUTimerT35Expired+0x54>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8003afe:	79fb      	ldrb	r3, [r7, #7]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000101 	.word	0x20000101

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	2600      	movs	r6, #0
 8003b10:	4d0c      	ldr	r5, [pc, #48]	; (8003b44 <__libc_init_array+0x38>)
 8003b12:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	f000 f830 	bl	8003b80 <_init>
 8003b20:	2600      	movs	r6, #0
 8003b22:	4d0a      	ldr	r5, [pc, #40]	; (8003b4c <__libc_init_array+0x40>)
 8003b24:	4c0a      	ldr	r4, [pc, #40]	; (8003b50 <__libc_init_array+0x44>)
 8003b26:	1b64      	subs	r4, r4, r5
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003dc0 	.word	0x08003dc0
 8003b48:	08003dc0 	.word	0x08003dc0
 8003b4c:	08003dc0 	.word	0x08003dc0
 8003b50:	08003dc4 	.word	0x08003dc4

08003b54 <memcpy>:
 8003b54:	440a      	add	r2, r1
 8003b56:	4291      	cmp	r1, r2
 8003b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b5c:	d100      	bne.n	8003b60 <memcpy+0xc>
 8003b5e:	4770      	bx	lr
 8003b60:	b510      	push	{r4, lr}
 8003b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b6c:	d1f9      	bne.n	8003b62 <memcpy+0xe>
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <memset>:
 8003b70:	4603      	mov	r3, r0
 8003b72:	4402      	add	r2, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
