
MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004908  08004908  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004908  08004908  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000008c  0800499c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  0800499c  00020578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f17  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003425  00000000  00000000  00033fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000373f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00038398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcc5  00000000  00000000  000391c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001571a  00000000  00000000  00054e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b36a  00000000  00000000  0006a59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  0010595c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	00000000 	.word	0x00000000
 8000204:	080046c8 	.word	0x080046c8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000090 	.word	0x20000090
 8000220:	080046c8 	.word	0x080046c8

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa78 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f850 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f90a 	bl	8000448 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000234:	f000 f892 	bl	800035c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8dc 	bl	80003f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  eMBMasterInit(MB_RTU , &huart1 , 19200 ,&htim2 );
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <main+0x98>)
 800023e:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000242:	491f      	ldr	r1, [pc, #124]	; (80002c0 <main+0x9c>)
 8000244:	2000      	movs	r0, #0
 8000246:	f003 fb85 	bl	8003954 <eMBMasterInit>
  eMBMasterEnable();
 800024a:	f003 fbe9 	bl	8003a20 <eMBMasterEnable>
  xNeedPoll = TRUE ;
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0xa0>)
 8000250:	2201      	movs	r2, #1
 8000252:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      eMBMasterPoll ();
 8000254:	f003 fc00 	bl	8003a58 <eMBMasterPoll>
      HAL_Delay(10);
 8000258:	200a      	movs	r0, #10
 800025a:	f000 fac1 	bl	80007e0 <HAL_Delay>
      if(xNeedPoll)
 800025e:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <main+0xa0>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <main+0x54>
    	  {
    	  eMBMasterReqReadHoldingRegister(0x0A , 0 , 2 , 2); // 03
 8000266:	2302      	movs	r3, #2
 8000268:	2202      	movs	r2, #2
 800026a:	2100      	movs	r1, #0
 800026c:	200a      	movs	r0, #10
 800026e:	f003 f916 	bl	800349e <eMBMasterReqReadHoldingRegister>
    	  xNeedPoll = FALSE ;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0xa0>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
    	  }
      if(usMRegHoldBuf [9][0] == 0x01)
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0xa4>)
 800027a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800027e:	2b01      	cmp	r3, #1
 8000280:	d105      	bne.n	800028e <main+0x6a>
          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, ENABLE); // LED1 ON
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	4811      	ldr	r0, [pc, #68]	; (80002cc <main+0xa8>)
 8000288:	f000 feb2 	bl	8000ff0 <HAL_GPIO_WritePin>
 800028c:	e004      	b.n	8000298 <main+0x74>
      else
          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, DISABLE); // LED1 OFF
 800028e:	2200      	movs	r2, #0
 8000290:	2104      	movs	r1, #4
 8000292:	480e      	ldr	r0, [pc, #56]	; (80002cc <main+0xa8>)
 8000294:	f000 feac 	bl	8000ff0 <HAL_GPIO_WritePin>

      if(usMRegHoldBuf [9][1] == 0x01)
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <main+0xa4>)
 800029a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d105      	bne.n	80002ae <main+0x8a>
               HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, ENABLE); // LED2 ON
 80002a2:	2201      	movs	r2, #1
 80002a4:	2108      	movs	r1, #8
 80002a6:	4809      	ldr	r0, [pc, #36]	; (80002cc <main+0xa8>)
 80002a8:	f000 fea2 	bl	8000ff0 <HAL_GPIO_WritePin>
 80002ac:	e7d2      	b.n	8000254 <main+0x30>
           else
               HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, DISABLE); // LED2 OFF
 80002ae:	2200      	movs	r2, #0
 80002b0:	2108      	movs	r1, #8
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <main+0xa8>)
 80002b4:	f000 fe9c 	bl	8000ff0 <HAL_GPIO_WritePin>
      eMBMasterPoll ();
 80002b8:	e7cc      	b.n	8000254 <main+0x30>
 80002ba:	bf00      	nop
 80002bc:	2000035c 	.word	0x2000035c
 80002c0:	20000318 	.word	0x20000318
 80002c4:	2000056c 	.word	0x2000056c
 80002c8:	200003d8 	.word	0x200003d8
 80002cc:	40011800 	.word	0x40011800

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	; 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 f9ea 	bl	80046b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fe81 	bl	8001020 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000324:	f000 f8e2 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f8ec 	bl	8001520 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800034e:	f000 f8cd 	bl	80004ec <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	; 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000378:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_TIM2_Init+0x94>)
 800037a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_TIM2_Init+0x94>)
 8000382:	2247      	movs	r2, #71	; 0x47
 8000384:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_TIM2_Init+0x94>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_TIM2_Init+0x94>)
 800038e:	2231      	movs	r2, #49	; 0x31
 8000390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <MX_TIM2_Init+0x94>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_TIM2_Init+0x94>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039e:	4814      	ldr	r0, [pc, #80]	; (80003f0 <MX_TIM2_Init+0x94>)
 80003a0:	f001 fa58 	bl	8001854 <HAL_TIM_Base_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80003aa:	f000 f89f 	bl	80004ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b4:	f107 0308 	add.w	r3, r7, #8
 80003b8:	4619      	mov	r1, r3
 80003ba:	480d      	ldr	r0, [pc, #52]	; (80003f0 <MX_TIM2_Init+0x94>)
 80003bc:	f001 fc30 	bl	8001c20 <HAL_TIM_ConfigClockSource>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f891 	bl	80004ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	4619      	mov	r1, r3
 80003d6:	4806      	ldr	r0, [pc, #24]	; (80003f0 <MX_TIM2_Init+0x94>)
 80003d8:	f001 fe1a 	bl	8002010 <HAL_TIMEx_MasterConfigSynchronization>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80003e2:	f000 f883 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000035c 	.word	0x2000035c

080003f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <MX_USART1_UART_Init+0x50>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000400:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_USART1_UART_Init+0x4c>)
 800042c:	f001 fe6e 	bl	800210c <HAL_UART_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000436:	f000 f859 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000318 	.word	0x20000318
 8000444:	40013800 	.word	0x40013800

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800045c:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <MX_GPIO_Init+0x98>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a1f      	ldr	r2, [pc, #124]	; (80004e0 <MX_GPIO_Init+0x98>)
 8000462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <MX_GPIO_Init+0x98>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_GPIO_Init+0x98>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <MX_GPIO_Init+0x98>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_GPIO_Init+0x98>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	210c      	movs	r1, #12
 8000490:	4814      	ldr	r0, [pc, #80]	; (80004e4 <MX_GPIO_Init+0x9c>)
 8000492:	f000 fdad 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2110      	movs	r1, #16
 800049a:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_GPIO_Init+0xa0>)
 800049c:	f000 fda8 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80004a0:	230c      	movs	r3, #12
 80004a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004b0:	f107 0308 	add.w	r3, r7, #8
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <MX_GPIO_Init+0x9c>)
 80004b8:	f000 fc06 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_RTS_Pin */
  GPIO_InitStruct.Pin = RS485_RTS_Pin;
 80004bc:	2310      	movs	r3, #16
 80004be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RS485_RTS_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4619      	mov	r1, r3
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_GPIO_Init+0xa0>)
 80004d4:	f000 fbf8 	bl	8000cc8 <HAL_GPIO_Init>

}
 80004d8:	bf00      	nop
 80004da:	3718      	adds	r7, #24
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40011800 	.word	0x40011800
 80004e8:	40010800 	.word	0x40010800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800056c:	d113      	bne.n	8000596 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_TIM_Base_MspInit+0x44>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <HAL_TIM_Base_MspInit+0x44>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_TIM_Base_MspInit+0x44>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	201c      	movs	r0, #28
 800058c:	f000 fa23 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000590:	201c      	movs	r0, #28
 8000592:	f000 fa3c 	bl	8000a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <HAL_UART_MspInit+0x9c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d139      	bne.n	8000638 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a18      	ldr	r2, [pc, #96]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <HAL_UART_MspInit+0xa4>)
 800060a:	f000 fb5d 	bl	8000cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <HAL_UART_MspInit+0xa4>)
 8000624:	f000 fb50 	bl	8000cc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2025      	movs	r0, #37	; 0x25
 800062e:	f000 f9d2 	bl	80009d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000632:	2025      	movs	r0, #37	; 0x25
 8000634:	f000 f9eb 	bl	8000a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40013800 	.word	0x40013800
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000692:	f000 f889 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <TIM2_IRQHandler+0x10>)
 80006a2:	f001 f9b5 	bl	8001a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000035c 	.word	0x2000035c

080006b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <USART1_IRQHandler+0x10>)
 80006b6:	f001 fea5 	bl	8002404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000318 	.word	0x20000318

080006c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	; (8000714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f6:	f7ff ffe5 	bl	80006c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fa:	f003 ffab 	bl	8004654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd91 	bl	8000224 <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800070c:	08004910 	.word	0x08004910
  ldr r2, =_sbss
 8000710:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000714:	20000578 	.word	0x20000578

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f947 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fede 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f95f 	bl	8000a2a <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f927 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000008 	.word	0x20000008
 80007c8:	200003a4 	.word	0x200003a4

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	200003a4 	.word	0x200003a4

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff fff0 	bl	80007cc <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffe0 	bl	80007cc <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <__NVIC_EnableIRQ+0x34>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff90 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff2d 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff42 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff90 	bl	8000918 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5f 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff35 	bl	800088c <__NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffa2 	bl	800097c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d008      	beq.n	8000a6a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e020      	b.n	8000aac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 020e 	bic.w	r2, r2, #14
 8000a78:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f202 	lsl.w	r2, r1, r2
 8000a98:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d005      	beq.n	8000ada <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e0d6      	b.n	8000c88 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 020e 	bic.w	r2, r2, #14
 8000ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b64      	ldr	r3, [pc, #400]	; (8000c94 <HAL_DMA_Abort_IT+0x1dc>)
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d958      	bls.n	8000bb8 <HAL_DMA_Abort_IT+0x100>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a63      	ldr	r2, [pc, #396]	; (8000c98 <HAL_DMA_Abort_IT+0x1e0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d04f      	beq.n	8000bb0 <HAL_DMA_Abort_IT+0xf8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a61      	ldr	r2, [pc, #388]	; (8000c9c <HAL_DMA_Abort_IT+0x1e4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d048      	beq.n	8000bac <HAL_DMA_Abort_IT+0xf4>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a60      	ldr	r2, [pc, #384]	; (8000ca0 <HAL_DMA_Abort_IT+0x1e8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d040      	beq.n	8000ba6 <HAL_DMA_Abort_IT+0xee>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a5e      	ldr	r2, [pc, #376]	; (8000ca4 <HAL_DMA_Abort_IT+0x1ec>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d038      	beq.n	8000ba0 <HAL_DMA_Abort_IT+0xe8>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a5d      	ldr	r2, [pc, #372]	; (8000ca8 <HAL_DMA_Abort_IT+0x1f0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d030      	beq.n	8000b9a <HAL_DMA_Abort_IT+0xe2>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a5b      	ldr	r2, [pc, #364]	; (8000cac <HAL_DMA_Abort_IT+0x1f4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d028      	beq.n	8000b94 <HAL_DMA_Abort_IT+0xdc>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a53      	ldr	r2, [pc, #332]	; (8000c94 <HAL_DMA_Abort_IT+0x1dc>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d020      	beq.n	8000b8e <HAL_DMA_Abort_IT+0xd6>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <HAL_DMA_Abort_IT+0x1f8>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d019      	beq.n	8000b8a <HAL_DMA_Abort_IT+0xd2>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a56      	ldr	r2, [pc, #344]	; (8000cb4 <HAL_DMA_Abort_IT+0x1fc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d012      	beq.n	8000b86 <HAL_DMA_Abort_IT+0xce>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a54      	ldr	r2, [pc, #336]	; (8000cb8 <HAL_DMA_Abort_IT+0x200>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d00a      	beq.n	8000b80 <HAL_DMA_Abort_IT+0xc8>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a53      	ldr	r2, [pc, #332]	; (8000cbc <HAL_DMA_Abort_IT+0x204>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d102      	bne.n	8000b7a <HAL_DMA_Abort_IT+0xc2>
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	e01b      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7e:	e018      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b84:	e015      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b86:	2310      	movs	r3, #16
 8000b88:	e013      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e011      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b92:	e00e      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b98:	e00b      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9e:	e008      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba4:	e005      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000baa:	e002      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000bac:	2310      	movs	r3, #16
 8000bae:	e000      	b.n	8000bb2 <HAL_DMA_Abort_IT+0xfa>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4a43      	ldr	r2, [pc, #268]	; (8000cc0 <HAL_DMA_Abort_IT+0x208>)
 8000bb4:	6053      	str	r3, [r2, #4]
 8000bb6:	e057      	b.n	8000c68 <HAL_DMA_Abort_IT+0x1b0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a36      	ldr	r2, [pc, #216]	; (8000c98 <HAL_DMA_Abort_IT+0x1e0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d04f      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x1aa>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a35      	ldr	r2, [pc, #212]	; (8000c9c <HAL_DMA_Abort_IT+0x1e4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d048      	beq.n	8000c5e <HAL_DMA_Abort_IT+0x1a6>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <HAL_DMA_Abort_IT+0x1e8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d040      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x1a0>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <HAL_DMA_Abort_IT+0x1ec>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d038      	beq.n	8000c52 <HAL_DMA_Abort_IT+0x19a>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <HAL_DMA_Abort_IT+0x1f0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d030      	beq.n	8000c4c <HAL_DMA_Abort_IT+0x194>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <HAL_DMA_Abort_IT+0x1f4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d028      	beq.n	8000c46 <HAL_DMA_Abort_IT+0x18e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <HAL_DMA_Abort_IT+0x1dc>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d020      	beq.n	8000c40 <HAL_DMA_Abort_IT+0x188>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <HAL_DMA_Abort_IT+0x1f8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d019      	beq.n	8000c3c <HAL_DMA_Abort_IT+0x184>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <HAL_DMA_Abort_IT+0x1fc>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d012      	beq.n	8000c38 <HAL_DMA_Abort_IT+0x180>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_DMA_Abort_IT+0x200>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00a      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x17a>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <HAL_DMA_Abort_IT+0x204>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d102      	bne.n	8000c2c <HAL_DMA_Abort_IT+0x174>
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	e01b      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c30:	e018      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c36:	e015      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c38:	2310      	movs	r3, #16
 8000c3a:	e013      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e011      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c44:	e00e      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c4a:	e00b      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	e008      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c56:	e005      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5c:	e002      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c5e:	2310      	movs	r3, #16
 8000c60:	e000      	b.n	8000c64 <HAL_DMA_Abort_IT+0x1ac>
 8000c62:	2301      	movs	r3, #1
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_DMA_Abort_IT+0x20c>)
 8000c66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	4798      	blx	r3
    } 
  }
  return status;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020080 	.word	0x40020080
 8000c98:	40020008 	.word	0x40020008
 8000c9c:	4002001c 	.word	0x4002001c
 8000ca0:	40020030 	.word	0x40020030
 8000ca4:	40020044 	.word	0x40020044
 8000ca8:	40020058 	.word	0x40020058
 8000cac:	4002006c 	.word	0x4002006c
 8000cb0:	40020408 	.word	0x40020408
 8000cb4:	4002041c 	.word	0x4002041c
 8000cb8:	40020430 	.word	0x40020430
 8000cbc:	40020444 	.word	0x40020444
 8000cc0:	40020400 	.word	0x40020400
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b08b      	sub	sp, #44	; 0x2c
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	e179      	b.n	8000fd0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8168 	bne.w	8000fca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	4aa0      	ldr	r2, [pc, #640]	; (8000f80 <HAL_GPIO_Init+0x2b8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d05e      	beq.n	8000dc2 <HAL_GPIO_Init+0xfa>
 8000d04:	4a9e      	ldr	r2, [pc, #632]	; (8000f80 <HAL_GPIO_Init+0x2b8>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d875      	bhi.n	8000df6 <HAL_GPIO_Init+0x12e>
 8000d0a:	4a9e      	ldr	r2, [pc, #632]	; (8000f84 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d058      	beq.n	8000dc2 <HAL_GPIO_Init+0xfa>
 8000d10:	4a9c      	ldr	r2, [pc, #624]	; (8000f84 <HAL_GPIO_Init+0x2bc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d86f      	bhi.n	8000df6 <HAL_GPIO_Init+0x12e>
 8000d16:	4a9c      	ldr	r2, [pc, #624]	; (8000f88 <HAL_GPIO_Init+0x2c0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d052      	beq.n	8000dc2 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a9a      	ldr	r2, [pc, #616]	; (8000f88 <HAL_GPIO_Init+0x2c0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d869      	bhi.n	8000df6 <HAL_GPIO_Init+0x12e>
 8000d22:	4a9a      	ldr	r2, [pc, #616]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d04c      	beq.n	8000dc2 <HAL_GPIO_Init+0xfa>
 8000d28:	4a98      	ldr	r2, [pc, #608]	; (8000f8c <HAL_GPIO_Init+0x2c4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d863      	bhi.n	8000df6 <HAL_GPIO_Init+0x12e>
 8000d2e:	4a98      	ldr	r2, [pc, #608]	; (8000f90 <HAL_GPIO_Init+0x2c8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d046      	beq.n	8000dc2 <HAL_GPIO_Init+0xfa>
 8000d34:	4a96      	ldr	r2, [pc, #600]	; (8000f90 <HAL_GPIO_Init+0x2c8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d85d      	bhi.n	8000df6 <HAL_GPIO_Init+0x12e>
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d82a      	bhi.n	8000d94 <HAL_GPIO_Init+0xcc>
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d859      	bhi.n	8000df6 <HAL_GPIO_Init+0x12e>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <HAL_GPIO_Init+0x80>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000dc3 	.word	0x08000dc3
 8000d4c:	08000d9d 	.word	0x08000d9d
 8000d50:	08000daf 	.word	0x08000daf
 8000d54:	08000df1 	.word	0x08000df1
 8000d58:	08000df7 	.word	0x08000df7
 8000d5c:	08000df7 	.word	0x08000df7
 8000d60:	08000df7 	.word	0x08000df7
 8000d64:	08000df7 	.word	0x08000df7
 8000d68:	08000df7 	.word	0x08000df7
 8000d6c:	08000df7 	.word	0x08000df7
 8000d70:	08000df7 	.word	0x08000df7
 8000d74:	08000df7 	.word	0x08000df7
 8000d78:	08000df7 	.word	0x08000df7
 8000d7c:	08000df7 	.word	0x08000df7
 8000d80:	08000df7 	.word	0x08000df7
 8000d84:	08000df7 	.word	0x08000df7
 8000d88:	08000df7 	.word	0x08000df7
 8000d8c:	08000da5 	.word	0x08000da5
 8000d90:	08000db9 	.word	0x08000db9
 8000d94:	4a7f      	ldr	r2, [pc, #508]	; (8000f94 <HAL_GPIO_Init+0x2cc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d9a:	e02c      	b.n	8000df6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	623b      	str	r3, [r7, #32]
          break;
 8000da2:	e029      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	3304      	adds	r3, #4
 8000daa:	623b      	str	r3, [r7, #32]
          break;
 8000dac:	e024      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	3308      	adds	r3, #8
 8000db4:	623b      	str	r3, [r7, #32]
          break;
 8000db6:	e01f      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	330c      	adds	r3, #12
 8000dbe:	623b      	str	r3, [r7, #32]
          break;
 8000dc0:	e01a      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e013      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d105      	bne.n	8000de4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	611a      	str	r2, [r3, #16]
          break;
 8000de2:	e009      	b.n	8000df8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de4:	2308      	movs	r3, #8
 8000de6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	615a      	str	r2, [r3, #20]
          break;
 8000dee:	e003      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
          break;
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x130>
          break;
 8000df6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	d801      	bhi.n	8000e02 <HAL_GPIO_Init+0x13a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	e001      	b.n	8000e06 <HAL_GPIO_Init+0x13e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3304      	adds	r3, #4
 8000e06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2bff      	cmp	r3, #255	; 0xff
 8000e0c:	d802      	bhi.n	8000e14 <HAL_GPIO_Init+0x14c>
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x152>
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	3b08      	subs	r3, #8
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	210f      	movs	r1, #15
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	6a39      	ldr	r1, [r7, #32]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	431a      	orrs	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80c1 	beq.w	8000fca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e60:	4a4e      	ldr	r2, [pc, #312]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <HAL_GPIO_Init+0x2d8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d01f      	beq.n	8000ecc <HAL_GPIO_Init+0x204>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d019      	beq.n	8000ec8 <HAL_GPIO_Init+0x200>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a44      	ldr	r2, [pc, #272]	; (8000fa8 <HAL_GPIO_Init+0x2e0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_GPIO_Init+0x1fc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a43      	ldr	r2, [pc, #268]	; (8000fac <HAL_GPIO_Init+0x2e4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_GPIO_Init+0x1f8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a42      	ldr	r2, [pc, #264]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x1f4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a41      	ldr	r2, [pc, #260]	; (8000fb4 <HAL_GPIO_Init+0x2ec>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_GPIO_Init+0x1f0>
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000eb8:	2306      	movs	r3, #6
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x206>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ede:	492f      	ldr	r1, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	492e      	ldr	r1, [pc, #184]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	492a      	ldr	r1, [pc, #168]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4924      	ldr	r1, [pc, #144]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4920      	ldr	r1, [pc, #128]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	491a      	ldr	r1, [pc, #104]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4916      	ldr	r1, [pc, #88]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d025      	beq.n	8000fbc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	4910      	ldr	r1, [pc, #64]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
 8000f7c:	e025      	b.n	8000fca <HAL_GPIO_Init+0x302>
 8000f7e:	bf00      	nop
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10310000 	.word	0x10310000
 8000f88:	10220000 	.word	0x10220000
 8000f8c:	10210000 	.word	0x10210000
 8000f90:	10120000 	.word	0x10120000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40011800 	.word	0x40011800
 8000fb4:	40011c00 	.word	0x40011c00
 8000fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4909      	ldr	r1, [pc, #36]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3301      	adds	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f47f ae7e 	bne.w	8000cdc <HAL_GPIO_Init+0x14>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	372c      	adds	r7, #44	; 0x2c
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800100c:	e003      	b.n	8001016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	611a      	str	r2, [r3, #16]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e26c      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8087 	beq.w	800114e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001040:	4b92      	ldr	r3, [pc, #584]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b04      	cmp	r3, #4
 800104a:	d00c      	beq.n	8001066 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800104c:	4b8f      	ldr	r3, [pc, #572]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	d112      	bne.n	800107e <HAL_RCC_OscConfig+0x5e>
 8001058:	4b8c      	ldr	r3, [pc, #560]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d10b      	bne.n	800107e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001066:	4b89      	ldr	r3, [pc, #548]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d06c      	beq.n	800114c <HAL_RCC_OscConfig+0x12c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d168      	bne.n	800114c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e246      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001086:	d106      	bne.n	8001096 <HAL_RCC_OscConfig+0x76>
 8001088:	4b80      	ldr	r3, [pc, #512]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e02e      	b.n	80010f4 <HAL_RCC_OscConfig+0xd4>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x98>
 800109e:	4b7b      	ldr	r3, [pc, #492]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a7a      	ldr	r2, [pc, #488]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b78      	ldr	r3, [pc, #480]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a77      	ldr	r2, [pc, #476]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01d      	b.n	80010f4 <HAL_RCC_OscConfig+0xd4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0xbc>
 80010c2:	4b72      	ldr	r3, [pc, #456]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a71      	ldr	r2, [pc, #452]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b6f      	ldr	r3, [pc, #444]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6e      	ldr	r2, [pc, #440]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0xd4>
 80010dc:	4b6b      	ldr	r3, [pc, #428]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a6a      	ldr	r2, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a67      	ldr	r2, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb66 	bl	80007cc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fb62 	bl	80007cc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1fa      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0xe4>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fb52 	bl	80007cc <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fb4e 	bl	80007cc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1e6      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x10c>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d063      	beq.n	8001222 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800115a:	4b4c      	ldr	r3, [pc, #304]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001166:	4b49      	ldr	r3, [pc, #292]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b08      	cmp	r3, #8
 8001170:	d11c      	bne.n	80011ac <HAL_RCC_OscConfig+0x18c>
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x176>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e1ba      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4939      	ldr	r1, [pc, #228]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	e03a      	b.n	8001222 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_RCC_OscConfig+0x270>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb07 	bl	80007cc <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fb03 	bl	80007cc <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e19b      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4927      	ldr	r1, [pc, #156]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_RCC_OscConfig+0x270>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fae6 	bl	80007cc <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fae2 	bl	80007cc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e17a      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d03a      	beq.n	80012a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d019      	beq.n	800126a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_RCC_OscConfig+0x274>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fac6 	bl	80007cc <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fac2 	bl	80007cc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e15a      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 fad8 	bl	8001818 <RCC_Delay>
 8001268:	e01c      	b.n	80012a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_RCC_OscConfig+0x274>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff faac 	bl	80007cc <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001276:	e00f      	b.n	8001298 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff faa8 	bl	80007cc <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d908      	bls.n	8001298 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e140      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	42420000 	.word	0x42420000
 8001294:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	4b9e      	ldr	r3, [pc, #632]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e9      	bne.n	8001278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80a6 	beq.w	80013fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b6:	4b97      	ldr	r3, [pc, #604]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10d      	bne.n	80012de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b94      	ldr	r3, [pc, #592]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a93      	ldr	r2, [pc, #588]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b91      	ldr	r3, [pc, #580]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b8e      	ldr	r3, [pc, #568]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ea:	4b8b      	ldr	r3, [pc, #556]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fa69 	bl	80007cc <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fe:	f7ff fa65 	bl	80007cc <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b64      	cmp	r3, #100	; 0x64
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e0fd      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x4f8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x312>
 8001324:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4a7a      	ldr	r2, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6213      	str	r3, [r2, #32]
 8001330:	e02d      	b.n	800138e <HAL_RCC_OscConfig+0x36e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x334>
 800133a:	4b76      	ldr	r3, [pc, #472]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a75      	ldr	r2, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	4b73      	ldr	r3, [pc, #460]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a72      	ldr	r2, [pc, #456]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	e01c      	b.n	800138e <HAL_RCC_OscConfig+0x36e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x356>
 800135c:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a6c      	ldr	r2, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e00b      	b.n	800138e <HAL_RCC_OscConfig+0x36e>
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a63      	ldr	r2, [pc, #396]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d015      	beq.n	80013c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fa19 	bl	80007cc <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fa15 	bl	80007cc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0ab      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	4b57      	ldr	r3, [pc, #348]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ee      	beq.n	800139e <HAL_RCC_OscConfig+0x37e>
 80013c0:	e014      	b.n	80013ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fa03 	bl	80007cc <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f9ff 	bl	80007cc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e095      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ee      	bne.n	80013ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d105      	bne.n	80013fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	4b48      	ldr	r3, [pc, #288]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a47      	ldr	r2, [pc, #284]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8081 	beq.w	800150a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d061      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d146      	bne.n	80014aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_OscConfig+0x4fc>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff f9d3 	bl	80007cc <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff f9cf 	bl	80007cc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e067      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143c:	4b35      	ldr	r3, [pc, #212]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d108      	bne.n	8001464 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	492d      	ldr	r1, [pc, #180]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a19      	ldr	r1, [r3, #32]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	430b      	orrs	r3, r1
 8001476:	4927      	ldr	r1, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x4fc>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff f9a3 	bl	80007cc <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff f99f 	bl	80007cc <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e037      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x46a>
 80014a8:	e02f      	b.n	800150a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_OscConfig+0x4fc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f98c 	bl	80007cc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f988 	bl	80007cc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e020      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x498>
 80014d6:	e018      	b.n	800150a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e013      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	40007000 	.word	0x40007000
 800151c:	42420060 	.word	0x42420060

08001520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0d0      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d910      	bls.n	8001564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b67      	ldr	r3, [pc, #412]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4965      	ldr	r1, [pc, #404]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001586:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800159e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	494d      	ldr	r1, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d040      	beq.n	8001640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d115      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e07f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e073      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06b      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f023 0203 	bic.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4936      	ldr	r1, [pc, #216]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff f8dc 	bl	80007cc <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	e00a      	b.n	800162e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff f8d8 	bl	80007cc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e053      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 020c 	and.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1eb      	bne.n	8001618 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d210      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4922      	ldr	r1, [pc, #136]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e032      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f821 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_RCC_ClockConfig+0x1c8>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1cc>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1d0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f83a 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000
 80016e4:	40021000 	.word	0x40021000
 80016e8:	080046f0 	.word	0x080046f0
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	b490      	push	{r4, r7}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016fc:	1d3c      	adds	r4, r7, #4
 80016fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001704:	f240 2301 	movw	r3, #513	; 0x201
 8001708:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b04      	cmp	r3, #4
 800172c:	d002      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x40>
 800172e:	2b08      	cmp	r3, #8
 8001730:	d003      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x46>
 8001732:	e02d      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001736:	623b      	str	r3, [r7, #32]
      break;
 8001738:	e02d      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	0c9b      	lsrs	r3, r3, #18
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001746:	4413      	add	r3, r2
 8001748:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800174c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	0c5b      	lsrs	r3, r3, #17
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001766:	4413      	add	r3, r2
 8001768:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800176c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001772:	fb02 f203 	mul.w	r2, r2, r3
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	e004      	b.n	800178a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	623b      	str	r3, [r7, #32]
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001792:	623b      	str	r3, [r7, #32]
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	6a3b      	ldr	r3, [r7, #32]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bc90      	pop	{r4, r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	080046e0 	.word	0x080046e0
 80017a8:	40021000 	.word	0x40021000
 80017ac:	007a1200 	.word	0x007a1200
 80017b0:	003d0900 	.word	0x003d0900

080017b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017cc:	f7ff fff2 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	08004700 	.word	0x08004700

080017f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0adb      	lsrs	r3, r3, #11
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4903      	ldr	r1, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	08004700 	.word	0x08004700

08001818 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <RCC_Delay+0x34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <RCC_Delay+0x38>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0a5b      	lsrs	r3, r3, #9
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001834:	bf00      	nop
  }
  while (Delay --);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	60fa      	str	r2, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f9      	bne.n	8001834 <RCC_Delay+0x1c>
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000000 	.word	0x20000000
 8001850:	10624dd3 	.word	0x10624dd3

08001854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e041      	b.n	80018ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7fe fe6e 	bl	800055c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 faac 	bl	8001df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d001      	beq.n	800190c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e044      	b.n	8001996 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_TIM_Base_Start_IT+0xac>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d018      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x6c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x6c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d00e      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x6c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d009      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x6c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_TIM_Base_Start_IT+0xb8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x6c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d111      	bne.n	8001984 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d010      	beq.n	8001994 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001982:	e007      	b.n	8001994 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40013400 	.word	0x40013400
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800
 80019b0:	40000c00 	.word	0x40000c00

080019b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10f      	bne.n	80019fc <HAL_TIM_Base_Stop_IT+0x48>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	f240 4344 	movw	r3, #1092	; 0x444
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_TIM_Base_Stop_IT+0x48>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0202 	mvn.w	r2, #2
 8001a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f9b1 	bl	8001dba <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f9a4 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f9b3 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d122      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11b      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0204 	mvn.w	r2, #4
 8001a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f987 	bl	8001dba <HAL_TIM_IC_CaptureCallback>
 8001aac:	e005      	b.n	8001aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f97a 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f989 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0208 	mvn.w	r2, #8
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f95d 	bl	8001dba <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f950 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f95f 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b10      	cmp	r3, #16
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0210 	mvn.w	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f933 	bl	8001dba <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f926 	bl	8001da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f935 	bl	8001dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0201 	mvn.w	r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f002 faba 	bl	8004108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b80      	cmp	r3, #128	; 0x80
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	2b80      	cmp	r3, #128	; 0x80
 8001bae:	d107      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fa9d 	bl	80020fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d107      	bne.n	8001bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8f9 	bl	8001dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0220 	mvn.w	r2, #32
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa68 	bl	80020e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_TIM_ConfigClockSource+0x18>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e0b3      	b.n	8001da0 <HAL_TIM_ConfigClockSource+0x180>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c70:	d03e      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0xd0>
 8001c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c76:	f200 8087 	bhi.w	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7e:	f000 8085 	beq.w	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c86:	d87f      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001c88:	2b70      	cmp	r3, #112	; 0x70
 8001c8a:	d01a      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0xa2>
 8001c8c:	2b70      	cmp	r3, #112	; 0x70
 8001c8e:	d87b      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001c90:	2b60      	cmp	r3, #96	; 0x60
 8001c92:	d050      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0x116>
 8001c94:	2b60      	cmp	r3, #96	; 0x60
 8001c96:	d877      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001c98:	2b50      	cmp	r3, #80	; 0x50
 8001c9a:	d03c      	beq.n	8001d16 <HAL_TIM_ConfigClockSource+0xf6>
 8001c9c:	2b50      	cmp	r3, #80	; 0x50
 8001c9e:	d873      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d058      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0x136>
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d86f      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001ca8:	2b30      	cmp	r3, #48	; 0x30
 8001caa:	d064      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x156>
 8001cac:	2b30      	cmp	r3, #48	; 0x30
 8001cae:	d86b      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d060      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x156>
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d867      	bhi.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d05c      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x156>
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d05a      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001cc0:	e062      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f000 f97e 	bl	8001fd2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ce4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	609a      	str	r2, [r3, #8]
      break;
 8001cee:	e04e      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f000 f967 	bl	8001fd2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d12:	609a      	str	r2, [r3, #8]
      break;
 8001d14:	e03b      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f000 f8de 	bl	8001ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2150      	movs	r1, #80	; 0x50
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f935 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d34:	e02b      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f000 f8fc 	bl	8001f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2160      	movs	r1, #96	; 0x60
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f925 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d54:	e01b      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f000 f8be 	bl	8001ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2140      	movs	r1, #64	; 0x40
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f915 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d74:	e00b      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f000 f90c 	bl	8001f9e <TIM_ITRx_SetConfig>
        break;
 8001d86:	e002      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001d88:	bf00      	nop
 8001d8a:	e000      	b.n	8001d8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001d8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a33      	ldr	r2, [pc, #204]	; (8001ed0 <TIM_Base_SetConfig+0xe0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <TIM_Base_SetConfig+0xe4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <TIM_Base_SetConfig+0xe8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <TIM_Base_SetConfig+0xec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <TIM_Base_SetConfig+0xf0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <TIM_Base_SetConfig+0xe0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <TIM_Base_SetConfig+0x82>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <TIM_Base_SetConfig+0xe4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <TIM_Base_SetConfig+0x82>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0x82>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <TIM_Base_SetConfig+0xe8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0x82>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <TIM_Base_SetConfig+0xec>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0x82>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <TIM_Base_SetConfig+0xf0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <TIM_Base_SetConfig+0xe0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <TIM_Base_SetConfig+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <TIM_Base_SetConfig+0xe4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d103      	bne.n	8001ec0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	615a      	str	r2, [r3, #20]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40013400 	.word	0x40013400
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40000c00 	.word	0x40000c00

08001ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f023 0201 	bic.w	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 030a 	bic.w	r3, r3, #10
 8001f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	621a      	str	r2, [r3, #32]
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 0210 	bic.w	r2, r3, #16
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	621a      	str	r2, [r3, #32]
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f043 0307 	orr.w	r3, r3, #7
 8001fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	021a      	lsls	r2, r3, #8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	609a      	str	r2, [r3, #8]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002024:	2302      	movs	r3, #2
 8002026:	e050      	b.n	80020ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d018      	beq.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207e:	d00e      	beq.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d009      	beq.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10c      	bne.n	80020b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40013400 	.word	0x40013400
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00

080020e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e03f      	b.n	800219e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fa36 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fcdd 	bl	8002b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	4613      	mov	r3, r2
 80021b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d130      	bne.n	8002222 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_UART_Transmit_IT+0x26>
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e029      	b.n	8002224 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_UART_Transmit_IT+0x38>
 80021da:	2302      	movs	r3, #2
 80021dc:	e022      	b.n	8002224 <HAL_UART_Transmit_IT+0x7e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d11d      	bne.n	8002284 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Receive_IT+0x26>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e016      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_UART_Receive_IT+0x38>
 8002262:	2302      	movs	r3, #2
 8002264:	e00f      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	461a      	mov	r2, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fa92 	bl	80027a4 <UART_Start_Receive_IT>
 8002280:	4603      	mov	r3, r0
 8002282:	e000      	b.n	8002286 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022a6:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02a      	beq.n	800230c <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d013      	beq.n	80022f6 <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_UART_AbortTransmit_IT+0x9c>)
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fbec 	bl	8000ab8 <HAL_DMA_Abort_IT>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01c      	beq.n	8002320 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
 80022f4:	e014      	b.n	8002320 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2220      	movs	r2, #32
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fa30 	bl	800276a <HAL_UART_AbortTransmitCpltCallback>
 800230a:	e009      	b.n	8002320 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa25 	bl	800276a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	08002897 	.word	0x08002897

08002330 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002346:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0210 	bic.w	r2, r2, #16
 800236e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d02d      	beq.n	80023da <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	2b00      	cmp	r3, #0
 8002394:	d013      	beq.n	80023be <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_UART_AbortReceive_IT+0xd0>)
 800239c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fb88 	bl	8000ab8 <HAL_DMA_Abort_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d022      	beq.n	80023f4 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
 80023bc:	e01a      	b.n	80023f4 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f9d2 	bl	800277c <HAL_UART_AbortReceiveCpltCallback>
 80023d8:	e00c      	b.n	80023f4 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9c4 	bl	800277c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	080028c1 	.word	0x080028c1

08002404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_UART_IRQHandler+0x52>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fab5 	bl	80029be <UART_Receive_IT>
      return;
 8002454:	e17b      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80b1 	beq.w	80025c0 <HAL_UART_IRQHandler+0x1bc>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_UART_IRQHandler+0x70>
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80a6 	beq.w	80025c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_UART_IRQHandler+0x90>
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_UART_IRQHandler+0xb0>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_UART_IRQHandler+0xd0>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00f      	beq.n	80024fe <HAL_UART_IRQHandler+0xfa>
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <HAL_UART_IRQHandler+0xee>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f043 0208 	orr.w	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 811e 	beq.w	8002744 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_UART_IRQHandler+0x11e>
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fa4e 	bl	80029be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_UART_IRQHandler+0x146>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d031      	beq.n	80025ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f963 	bl	8002816 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d023      	beq.n	80025a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4a76      	ldr	r2, [pc, #472]	; (8002754 <HAL_UART_IRQHandler+0x350>)
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fa98 	bl	8000ab8 <HAL_DMA_Abort_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002598:	4610      	mov	r0, r2
 800259a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e00e      	b.n	80025bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8da 	bl	8002758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	e00a      	b.n	80025bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8d6 	bl	8002758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	e006      	b.n	80025bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8d2 	bl	8002758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025ba:	e0c3      	b.n	8002744 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	bf00      	nop
    return;
 80025be:	e0c1      	b.n	8002744 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 80a1 	bne.w	800270c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 809b 	beq.w	800270c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8095 	beq.w	800270c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04e      	beq.n	80026a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002610:	8a3b      	ldrh	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8098 	beq.w	8002748 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800261c:	8a3a      	ldrh	r2, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	f080 8092 	bcs.w	8002748 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8a3a      	ldrh	r2, [r7, #16]
 8002628:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b20      	cmp	r3, #32
 8002632:	d02b      	beq.n	800268c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002642:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002662:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0210 	bic.w	r2, r2, #16
 8002680:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe f9db 	bl	8000a42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002694:	b29b      	uxth	r3, r3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f876 	bl	800278e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026a2:	e051      	b.n	8002748 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d047      	beq.n	800274c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026bc:	8a7b      	ldrh	r3, [r7, #18]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d044      	beq.n	800274c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002700:	8a7b      	ldrh	r3, [r7, #18]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f842 	bl	800278e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800270a:	e01f      	b.n	800274c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_UART_IRQHandler+0x324>
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8e5 	bl	80028f0 <UART_Transmit_IT>
    return;
 8002726:	e012      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_UART_IRQHandler+0x34a>
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f926 	bl	800298e <UART_EndTransmit_IT>
    return;
 8002742:	e004      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
    return;
 8002744:	bf00      	nop
 8002746:	e002      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
      return;
 8002748:	bf00      	nop
 800274a:	e000      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
      return;
 800274c:	bf00      	nop
  }
}
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	0800286f 	.word	0x0800286f

08002758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2222      	movs	r2, #34	; 0x22
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800282c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0210 	bic.w	r2, r2, #16
 8002854:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff ff65 	bl	8002758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff ff59 	bl	800276a <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7ff ff4a 	bl	800277c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b21      	cmp	r3, #33	; 0x21
 8002902:	d13e      	bne.n	8002982 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d114      	bne.n	8002938 <UART_Transmit_IT+0x48>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d110      	bne.n	8002938 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800292a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	621a      	str	r2, [r3, #32]
 8002936:	e008      	b.n	800294a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6211      	str	r1, [r2, #32]
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4619      	mov	r1, r3
 8002958:	84d1      	strh	r1, [r2, #38]	; 0x26
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f001 fb50 	bl	8004054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b22      	cmp	r3, #34	; 0x22
 80029d0:	f040 8099 	bne.w	8002b06 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d117      	bne.n	8002a0e <UART_Receive_IT+0x50>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	1c9a      	adds	r2, r3, #2
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a0c:	e026      	b.n	8002a5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d007      	beq.n	8002a32 <UART_Receive_IT+0x74>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <UART_Receive_IT+0x82>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e008      	b.n	8002a52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d148      	bne.n	8002b02 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0220 	bic.w	r2, r2, #32
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d123      	bne.n	8002af8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0210 	bic.w	r2, r2, #16
 8002ac4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d10a      	bne.n	8002aea <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff fe4c 	bl	800278e <HAL_UARTEx_RxEventCallback>
 8002af6:	e002      	b.n	8002afe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 fa8b 	bl	8004014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e002      	b.n	8002b08 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b4a:	f023 030c 	bic.w	r3, r3, #12
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2c      	ldr	r2, [pc, #176]	; (8002c24 <UART_SetConfig+0x114>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d103      	bne.n	8002b80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b78:	f7fe fe3a 	bl	80017f0 <HAL_RCC_GetPCLK2Freq>
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	e002      	b.n	8002b86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b80:	f7fe fe22 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 8002b84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <UART_SetConfig+0x118>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	0119      	lsls	r1, r3, #4
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <UART_SetConfig+0x118>)
 8002bbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2064      	movs	r0, #100	; 0x64
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	3332      	adds	r3, #50	; 0x32
 8002bd0:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <UART_SetConfig+0x118>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	4419      	add	r1, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <UART_SetConfig+0x118>)
 8002bf6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	fb00 f303 	mul.w	r3, r0, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <UART_SetConfig+0x118>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	440a      	add	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40013800 	.word	0x40013800
 8002c28:	51eb851f 	.word	0x51eb851f

08002c2c <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	803b      	strh	r3, [r7, #0]
#if M_REG_INPUT_NREGS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8002c40:	f001 f868 	bl	8003d14 <ucMBMasterGetDestAddress>
 8002c44:	4603      	mov	r3, r0
 8002c46:	3b01      	subs	r3, #1
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <eMBMasterRegInputCB+0xb8>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8002c50:	2300      	movs	r3, #0
 8002c52:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 8002c54:	2302      	movs	r3, #2
 8002c56:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <eMBMasterRegInputCB+0xbc>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8002c64:	887a      	ldrh	r2, [r7, #2]
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d333      	bcc.n	8002cd4 <eMBMasterRegInputCB+0xa8>
 8002c6c:	887a      	ldrh	r2, [r7, #2]
 8002c6e:	883b      	ldrh	r3, [r7, #0]
 8002c70:	441a      	add	r2, r3
 8002c72:	89f9      	ldrh	r1, [r7, #14]
 8002c74:	89bb      	ldrh	r3, [r7, #12]
 8002c76:	440b      	add	r3, r1
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dc2b      	bgt.n	8002cd4 <eMBMasterRegInputCB+0xa8>
    {
        iRegIndex = usAddress - usRegInStart;
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 8002c84:	e022      	b.n	8002ccc <eMBMasterRegInputCB+0xa0>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	8abb      	ldrh	r3, [r7, #20]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	6939      	ldr	r1, [r7, #16]
 8002c96:	440b      	add	r3, r1
 8002c98:	0212      	lsls	r2, r2, #8
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	7818      	ldrb	r0, [r3, #0]
 8002ca6:	8abb      	ldrh	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	8819      	ldrh	r1, [r3, #0]
 8002cb0:	b282      	uxth	r2, r0
 8002cb2:	8abb      	ldrh	r3, [r7, #20]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	6938      	ldr	r0, [r7, #16]
 8002cb8:	4403      	add	r3, r0
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8002cc0:	8abb      	ldrh	r3, [r7, #20]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 8002cc6:	883b      	ldrh	r3, [r7, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8002ccc:	883b      	ldrh	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1d9      	bne.n	8002c86 <eMBMasterRegInputCB+0x5a>
    if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8002cd2:	e001      	b.n	8002cd8 <eMBMasterRegInputCB+0xac>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
#else
	return MB_ENOREG;
#endif
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000518 	.word	0x20000518
 8002ce8:	200000ac 	.word	0x200000ac

08002cec <eMBMasterRegHoldingCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	71fb      	strb	r3, [r7, #7]
#if M_REG_HOLDING_NREGS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002d06:	2300      	movs	r3, #0
 8002d08:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8002d0a:	f001 f803 	bl	8003d14 <ucMBMasterGetDestAddress>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <eMBMasterRegHoldingCB+0x118>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 8002d20:	2300      	movs	r3, #0
 8002d22:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 8002d24:	230a      	movs	r3, #10
 8002d26:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <eMBMasterRegHoldingCB+0x11c>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8002d38:	897a      	ldrh	r2, [r7, #10]
 8002d3a:	8afb      	ldrh	r3, [r7, #22]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d359      	bcc.n	8002df4 <eMBMasterRegHoldingCB+0x108>
 8002d40:	897a      	ldrh	r2, [r7, #10]
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	441a      	add	r2, r3
 8002d46:	8af9      	ldrh	r1, [r7, #22]
 8002d48:	8abb      	ldrh	r3, [r7, #20]
 8002d4a:	440b      	add	r3, r1
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dc51      	bgt.n	8002df4 <eMBMasterRegHoldingCB+0x108>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8002d50:	897a      	ldrh	r2, [r7, #10]
 8002d52:	8a7b      	ldrh	r3, [r7, #18]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01e      	beq.n	8002d9c <eMBMasterRegHoldingCB+0xb0>
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d043      	beq.n	8002dea <eMBMasterRegHoldingCB+0xfe>
 8002d62:	e049      	b.n	8002df8 <eMBMasterRegHoldingCB+0x10c>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8002d64:	8bbb      	ldrh	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	b299      	uxth	r1, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	b2ca      	uxtb	r2, r1
 8002d7a:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8002d7c:	8bbb      	ldrh	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	8819      	ldrh	r1, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	60fa      	str	r2, [r7, #12]
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8002d90:	8bbb      	ldrh	r3, [r7, #28]
 8002d92:	3301      	adds	r3, #1
 8002d94:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e0      	bne.n	8002d64 <eMBMasterRegHoldingCB+0x78>
            }
            break;
 8002da2:	e026      	b.n	8002df2 <eMBMasterRegHoldingCB+0x106>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60fa      	str	r2, [r7, #12]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	8bbb      	ldrh	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	440b      	add	r3, r1
 8002db6:	0212      	lsls	r2, r2, #8
 8002db8:	b292      	uxth	r2, r2
 8002dba:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60fa      	str	r2, [r7, #12]
 8002dc2:	7818      	ldrb	r0, [r3, #0]
 8002dc4:	8bbb      	ldrh	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4413      	add	r3, r2
 8002dcc:	8819      	ldrh	r1, [r3, #0]
 8002dce:	b282      	uxth	r2, r0
 8002dd0:	8bbb      	ldrh	r3, [r7, #28]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	4403      	add	r3, r0
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8002dde:	8bbb      	ldrh	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1d9      	bne.n	8002da4 <eMBMasterRegHoldingCB+0xb8>
            }
            break;
 8002df0:	bf00      	nop
        switch (eMode)
 8002df2:	e001      	b.n	8002df8 <eMBMasterRegHoldingCB+0x10c>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
#else
	return MB_ENOREG;
#endif
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200003d8 	.word	0x200003d8
 8002e08:	200000ae 	.word	0x200000ae

08002e0c <eMBMasterRegCoilsCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBMasterRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b08b      	sub	sp, #44	; 0x2c
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	813b      	strh	r3, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	71fb      	strb	r3, [r7, #7]
#if M_COIL_NCOILS > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 8002e36:	f000 ff6d 	bl	8003d14 <ucMBMasterGetDestAddress>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <eMBMasterRegCoilsCB+0x164>)
 8002e42:	4413      	add	r3, r2
 8002e44:	61fb      	str	r3, [r7, #28]
    COIL_START = M_COIL_START;
 8002e46:	2300      	movs	r3, #0
 8002e48:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = M_COIL_NCOILS;
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	833b      	strh	r3, [r7, #24]
    usCoilStart = usMCoilStart;
 8002e4e:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <eMBMasterRegCoilsCB+0x168>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	82fb      	strh	r3, [r7, #22]

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 8002e58:	897b      	ldrh	r3, [r7, #10]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= COIL_START) && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8002e5e:	897a      	ldrh	r2, [r7, #10]
 8002e60:	8b7b      	ldrh	r3, [r7, #26]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d37b      	bcc.n	8002f5e <eMBMasterRegCoilsCB+0x152>
 8002e66:	897a      	ldrh	r2, [r7, #10]
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	8b79      	ldrh	r1, [r7, #26]
 8002e6e:	8b3b      	ldrh	r3, [r7, #24]
 8002e70:	440b      	add	r3, r1
 8002e72:	429a      	cmp	r2, r3
 8002e74:	dc73      	bgt.n	8002f5e <eMBMasterRegCoilsCB+0x152>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 8002e76:	897a      	ldrh	r2, [r7, #10]
 8002e78:	8afb      	ldrh	r3, [r7, #22]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 8002e82:	897a      	ldrh	r2, [r7, #10]
 8002e84:	8afb      	ldrh	r3, [r7, #22]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	82bb      	strh	r3, [r7, #20]
        switch (eMode)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <eMBMasterRegCoilsCB+0xb6>
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d045      	beq.n	8002f26 <eMBMasterRegCoilsCB+0x11a>
 8002e9a:	e063      	b.n	8002f64 <eMBMasterRegCoilsCB+0x158>
        {
         /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 8002e9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	84ba      	strh	r2, [r7, #36]	; 0x24
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	1898      	adds	r0, r3, r2
 8002ea8:	68fc      	ldr	r4, [r7, #12]
 8002eaa:	1c63      	adds	r3, r4, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	8abb      	ldrh	r3, [r7, #20]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f000 fcf4 	bl	80038a0 <xMBUtilGetBits>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 8002ebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 8002ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e9      	bne.n	8002e9c <eMBMasterRegCoilsCB+0x90>
            }
            pucRegBuffer--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 8002ece:	893b      	ldrh	r3, [r7, #8]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	f1c3 0308 	rsb	r3, r3, #8
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	f1c3 0308 	rsb	r3, r3, #8
 8002ef8:	fa42 f303 	asr.w	r3, r2, r3
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	701a      	strb	r2, [r3, #0]
            break;
 8002f02:	e02b      	b.n	8002f5c <eMBMasterRegCoilsCB+0x150>

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8002f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	84ba      	strh	r2, [r7, #36]	; 0x24
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	8ab9      	ldrh	r1, [r7, #20]
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	f000 fc62 	bl	80037e4 <xMBUtilSetBits>
                iNReg--;
 8002f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f22:	3b01      	subs	r3, #1
 8002f24:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 8002f26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d8eb      	bhi.n	8002f04 <eMBMasterRegCoilsCB+0xf8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 8002f2c:	893b      	ldrh	r3, [r7, #8]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00f      	beq.n	8002f5a <eMBMasterRegCoilsCB+0x14e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8002f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	84ba      	strh	r2, [r7, #36]	; 0x24
 8002f40:	461a      	mov	r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	1898      	adds	r0, r3, r2
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	8ab9      	ldrh	r1, [r7, #20]
 8002f54:	4622      	mov	r2, r4
 8002f56:	f000 fc45 	bl	80037e4 <xMBUtilSetBits>
            }
            break;
 8002f5a:	bf00      	nop
        switch (eMode)
 8002f5c:	e002      	b.n	8002f64 <eMBMasterRegCoilsCB+0x158>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 8002f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
#else
	return MB_ENOREG;
#endif
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	372c      	adds	r7, #44	; 0x2c
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	200003b8 	.word	0x200003b8
 8002f74:	200000aa 	.word	0x200000aa

08002f78 <eMBMasterRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	803b      	strh	r3, [r7, #0]
#if M_DISCRETE_INPUT_NDISCRETES > 0
    eMBErrorCode    eStatus = MB_ENOERR;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 8002f8c:	883b      	ldrh	r3, [r7, #0]
 8002f8e:	08db      	lsrs	r3, r3, #3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucMDiscInBuf[ucMBMasterGetDestAddress() - 1];
 8002f96:	f000 febd 	bl	8003d14 <ucMBMasterGetDestAddress>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <eMBMasterRegDiscreteCB+0xdc>)
 8002fa0:	4413      	add	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = M_DISCRETE_INPUT_START;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = M_DISCRETE_INPUT_NDISCRETES;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usMDiscInStart;
 8002fac:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <eMBMasterRegDiscreteCB+0xe0>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 8002fb2:	887b      	ldrh	r3, [r7, #2]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START) && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 8002fb8:	887a      	ldrh	r2, [r7, #2]
 8002fba:	8a7b      	ldrh	r3, [r7, #18]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d341      	bcc.n	8003044 <eMBMasterRegDiscreteCB+0xcc>
 8002fc0:	887a      	ldrh	r2, [r7, #2]
 8002fc2:	883b      	ldrh	r3, [r7, #0]
 8002fc4:	441a      	add	r2, r3
 8002fc6:	8a79      	ldrh	r1, [r7, #18]
 8002fc8:	8a3b      	ldrh	r3, [r7, #16]
 8002fca:	440b      	add	r3, r1
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dc39      	bgt.n	8003044 <eMBMasterRegDiscreteCB+0xcc>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 8002fd0:	887a      	ldrh	r2, [r7, #2]
 8002fd2:	89fb      	ldrh	r3, [r7, #14]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	89fb      	ldrh	r3, [r7, #14]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	81bb      	strh	r3, [r7, #12]

        /* write current discrete values with new values from the protocol stack. */
        while (iNReg > 1)
 8002fea:	e010      	b.n	800300e <eMBMasterRegDiscreteCB+0x96>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8002fec:	8bbb      	ldrh	r3, [r7, #28]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	83ba      	strh	r2, [r7, #28]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1898      	adds	r0, r3, r2
                    *pucRegBuffer++);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	89b9      	ldrh	r1, [r7, #12]
 8003002:	2208      	movs	r2, #8
 8003004:	f000 fbee 	bl	80037e4 <xMBUtilSetBits>
            iNReg--;
 8003008:	8b7b      	ldrh	r3, [r7, #26]
 800300a:	3b01      	subs	r3, #1
 800300c:	837b      	strh	r3, [r7, #26]
        while (iNReg > 1)
 800300e:	8b7b      	ldrh	r3, [r7, #26]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d8eb      	bhi.n	8002fec <eMBMasterRegDiscreteCB+0x74>
        }
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 8003014:	883b      	ldrh	r3, [r7, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	803b      	strh	r3, [r7, #0]
        /* xMBUtilSetBits has bug when ucNBits is zero */
        if (usNDiscrete != 0)
 800301c:	883b      	ldrh	r3, [r7, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <eMBMasterRegDiscreteCB+0xd0>
        {
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8003022:	8bbb      	ldrh	r3, [r7, #28]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	83ba      	strh	r2, [r7, #28]
 8003028:	461a      	mov	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1898      	adds	r0, r3, r2
 800302e:	883b      	ldrh	r3, [r7, #0]
 8003030:	b2dc      	uxtb	r4, r3
                    usNDiscrete, *pucRegBuffer++);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	607a      	str	r2, [r7, #4]
            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	89b9      	ldrh	r1, [r7, #12]
 800303c:	4622      	mov	r2, r4
 800303e:	f000 fbd1 	bl	80037e4 <xMBUtilSetBits>
        if (usNDiscrete != 0)
 8003042:	e001      	b.n	8003048 <eMBMasterRegDiscreteCB+0xd0>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 8003044:	2301      	movs	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8003048:	7ffb      	ldrb	r3, [r7, #31]
#else
	return MB_ENOREG;
#endif
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	bf00      	nop
 8003054:	200003a8 	.word	0x200003a8
 8003058:	200000a8 	.word	0x200000a8

0800305c <eMBMasterFuncReadCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8003066:	2300      	movs	r3, #0
 8003068:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800306a:	f001 fae7 	bl	800463c <xMBMasterRequestIsBroadcast>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <eMBMasterFuncReadCoils+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8003074:	2300      	movs	r3, #0
 8003076:	75bb      	strb	r3, [r7, #22]
 8003078:	e056      	b.n	8003128 <eMBMasterFuncReadCoils+0xcc>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d950      	bls.n	8003124 <eMBMasterFuncReadCoils+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fa9e 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3301      	adds	r3, #1
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3302      	adds	r3, #2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	8abb      	ldrh	r3, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80030a6:	8abb      	ldrh	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3303      	adds	r3, #3
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3304      	adds	r3, #4
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	8a7b      	ldrh	r3, [r7, #18]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 80030c6:	8a7b      	ldrh	r3, [r7, #18]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <eMBMasterFuncReadCoils+0x82>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 80030d0:	8a7b      	ldrh	r3, [r7, #18]
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
 80030dc:	e003      	b.n	80030e6 <eMBMasterFuncReadCoils+0x8a>
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 80030de:	8a7b      	ldrh	r3, [r7, #18]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 80030e6:	8a7b      	ldrh	r3, [r7, #18]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d018      	beq.n	800311e <eMBMasterFuncReadCoils+0xc2>
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3301      	adds	r3, #1
 80030f0:	781b      	ldrb	r3, [r3, #0]
        if( ( usCoilCount >= 1 ) &&
 80030f2:	7dfa      	ldrb	r2, [r7, #23]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d112      	bne.n	800311e <eMBMasterFuncReadCoils+0xc2>
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1c98      	adds	r0, r3, #2
 80030fc:	8a7a      	ldrh	r2, [r7, #18]
 80030fe:	8ab9      	ldrh	r1, [r7, #20]
 8003100:	2300      	movs	r3, #0
 8003102:	f7ff fe83 	bl	8002e0c <eMBMasterRegCoilsCB>
 8003106:	4603      	mov	r3, r0
 8003108:	747b      	strb	r3, [r7, #17]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800310a:	7c7b      	ldrb	r3, [r7, #17]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <eMBMasterFuncReadCoils+0xcc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003110:	7c7b      	ldrb	r3, [r7, #17]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fbfd 	bl	8003912 <prveMBError2Exception>
 8003118:	4603      	mov	r3, r0
 800311a:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 800311c:	e004      	b.n	8003128 <eMBMasterFuncReadCoils+0xcc>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800311e:	2303      	movs	r3, #3
 8003120:	75bb      	strb	r3, [r7, #22]
 8003122:	e001      	b.n	8003128 <eMBMasterFuncReadCoils+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003124:	2303      	movs	r3, #3
 8003126:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8003128:	7dbb      	ldrb	r3, [r7, #22]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <eMBMasterFuncWriteCoil>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d140      	bne.n	80031ca <eMBMasterFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3302      	adds	r3, #2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b29a      	uxth	r2, r3
 800315c:	89bb      	ldrh	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8003162:	89bb      	ldrh	r3, [r7, #12]
 8003164:	3301      	adds	r3, #1
 8003166:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d128      	bne.n	80031c4 <eMBMasterFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3303      	adds	r3, #3
 8003176:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8003178:	2bff      	cmp	r3, #255	; 0xff
 800317a:	d004      	beq.n	8003186 <eMBMasterFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3303      	adds	r3, #3
 8003180:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11e      	bne.n	80031c4 <eMBMasterFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3303      	adds	r3, #3
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d102      	bne.n	800319a <eMBMasterFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8003194:	2301      	movs	r3, #1
 8003196:	723b      	strb	r3, [r7, #8]
 8003198:	e001      	b.n	800319e <eMBMasterFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800319e:	89b9      	ldrh	r1, [r7, #12]
 80031a0:	f107 0008 	add.w	r0, r7, #8
 80031a4:	2301      	movs	r3, #1
 80031a6:	2201      	movs	r2, #1
 80031a8:	f7ff fe30 	bl	8002e0c <eMBMasterRegCoilsCB>
 80031ac:	4603      	mov	r3, r0
 80031ae:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80031b0:	7afb      	ldrb	r3, [r7, #11]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <eMBMasterFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fbaa 	bl	8003912 <prveMBError2Exception>
 80031be:	4603      	mov	r3, r0
 80031c0:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80031c2:	e004      	b.n	80031ce <eMBMasterFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031c4:	2303      	movs	r3, #3
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e001      	b.n	80031ce <eMBMasterFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80031ca:	2303      	movs	r3, #3
 80031cc:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <eMBMasterFuncWriteMultipleCoils>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d004      	beq.n	80031f8 <eMBMasterFuncWriteMultipleCoils+0x20>
 80031ee:	f001 fa25 	bl	800463c <xMBMasterRequestIsBroadcast>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d052      	beq.n	800329e <eMBMasterFuncWriteMultipleCoils+0xc6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 f9e3 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3301      	adds	r3, #1
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3302      	adds	r3, #2
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b29a      	uxth	r2, r3
 8003216:	8abb      	ldrh	r3, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800321c:	8abb      	ldrh	r3, [r7, #20]
 800321e:	3301      	adds	r3, #1
 8003220:	82bb      	strh	r3, [r7, #20]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3303      	adds	r3, #3
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	827b      	strh	r3, [r7, #18]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b29a      	uxth	r2, r3
 8003236:	8a7b      	ldrh	r3, [r7, #18]
 8003238:	4313      	orrs	r3, r2
 800323a:	827b      	strh	r3, [r7, #18]

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	795b      	ldrb	r3, [r3, #5]
 8003240:	747b      	strb	r3, [r7, #17]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8003242:	8a7b      	ldrh	r3, [r7, #18]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <eMBMasterFuncWriteMultipleCoils+0x82>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800324c:	8a7b      	ldrh	r3, [r7, #18]
 800324e:	08db      	lsrs	r3, r3, #3
 8003250:	b29b      	uxth	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
 8003258:	e003      	b.n	8003262 <eMBMasterFuncWriteMultipleCoils+0x8a>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800325a:	8a7b      	ldrh	r3, [r7, #18]
 800325c:	08db      	lsrs	r3, r3, #3
 800325e:	b29b      	uxth	r3, r3
 8003260:	75fb      	strb	r3, [r7, #23]
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8003262:	8a7b      	ldrh	r3, [r7, #18]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <eMBMasterFuncWriteMultipleCoils+0xbe>
 8003268:	7dfa      	ldrb	r2, [r7, #23]
 800326a:	7c7b      	ldrb	r3, [r7, #17]
 800326c:	429a      	cmp	r2, r3
 800326e:	d112      	bne.n	8003296 <eMBMasterFuncWriteMultipleCoils+0xbe>
        {
            eRegStatus =
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1d98      	adds	r0, r3, #6
 8003274:	8a7a      	ldrh	r2, [r7, #18]
 8003276:	8ab9      	ldrh	r1, [r7, #20]
 8003278:	2301      	movs	r3, #1
 800327a:	f7ff fdc7 	bl	8002e0c <eMBMasterRegCoilsCB>
 800327e:	4603      	mov	r3, r0
 8003280:	743b      	strb	r3, [r7, #16]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003282:	7c3b      	ldrb	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <eMBMasterFuncWriteMultipleCoils+0xc4>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003288:	7c3b      	ldrb	r3, [r7, #16]
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fb41 	bl	8003912 <prveMBError2Exception>
 8003290:	4603      	mov	r3, r0
 8003292:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8003294:	e002      	b.n	800329c <eMBMasterFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003296:	2303      	movs	r3, #3
 8003298:	75bb      	strb	r3, [r7, #22]
        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 800329a:	e002      	b.n	80032a2 <eMBMasterFuncWriteMultipleCoils+0xca>
 800329c:	e001      	b.n	80032a2 <eMBMasterFuncWriteMultipleCoils+0xca>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800329e:	2303      	movs	r3, #3
 80032a0:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80032a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80032ba:	f001 f9bf 	bl	800463c <xMBMasterRequestIsBroadcast>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <eMBMasterFuncReadDiscreteInputs+0x1e>
    {
    	eStatus = MB_EX_NONE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75bb      	strb	r3, [r7, #22]
 80032c8:	e056      	b.n	8003378 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d950      	bls.n	8003374 <eMBMasterFuncReadDiscreteInputs+0xc8>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f976 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3301      	adds	r3, #1
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3302      	adds	r3, #2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	8abb      	ldrh	r3, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80032f6:	8abb      	ldrh	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3303      	adds	r3, #3
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3304      	adds	r3, #4
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b29a      	uxth	r2, r3
 8003310:	8a7b      	ldrh	r3, [r7, #18]
 8003312:	4313      	orrs	r3, r2
 8003314:	827b      	strh	r3, [r7, #18]

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8003316:	8a7b      	ldrh	r3, [r7, #18]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <eMBMasterFuncReadDiscreteInputs+0x82>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 8003320:	8a7b      	ldrh	r3, [r7, #18]
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	b29b      	uxth	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
 800332c:	e003      	b.n	8003336 <eMBMasterFuncReadDiscreteInputs+0x8a>
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 800332e:	8a7b      	ldrh	r3, [r7, #18]
 8003330:	08db      	lsrs	r3, r3, #3
 8003332:	b29b      	uxth	r3, r3
 8003334:	75fb      	strb	r3, [r7, #23]
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 8003336:	8a7b      	ldrh	r3, [r7, #18]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d018      	beq.n	800336e <eMBMasterFuncReadDiscreteInputs+0xc2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	7dfa      	ldrb	r2, [r7, #23]
 8003344:	429a      	cmp	r2, r3
 8003346:	d112      	bne.n	800336e <eMBMasterFuncReadDiscreteInputs+0xc2>
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3302      	adds	r3, #2
 800334c:	8a7a      	ldrh	r2, [r7, #18]
 800334e:	8ab9      	ldrh	r1, [r7, #20]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe11 	bl	8002f78 <eMBMasterRegDiscreteCB>
 8003356:	4603      	mov	r3, r0
 8003358:	747b      	strb	r3, [r7, #17]

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 800335a:	7c7b      	ldrb	r3, [r7, #17]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <eMBMasterFuncReadDiscreteInputs+0xcc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 8003360:	7c7b      	ldrb	r3, [r7, #17]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fad5 	bl	8003912 <prveMBError2Exception>
 8003368:	4603      	mov	r3, r0
 800336a:	75bb      	strb	r3, [r7, #22]
			if( eRegStatus != MB_ENOERR )
 800336c:	e004      	b.n	8003378 <eMBMasterFuncReadDiscreteInputs+0xcc>
			}
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800336e:	2303      	movs	r3, #3
 8003370:	75bb      	strb	r3, [r7, #22]
 8003372:	e001      	b.n	8003378 <eMBMasterFuncReadDiscreteInputs+0xcc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003374:	2303      	movs	r3, #3
 8003376:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8003378:	7dbb      	ldrb	r3, [r7, #22]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d122      	bne.n	80033de <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3302      	adds	r3, #2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	89bb      	ldrh	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80033b2:	89bb      	ldrh	r3, [r7, #12]
 80033b4:	3301      	adds	r3, #1
 80033b6:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1cd8      	adds	r0, r3, #3
 80033bc:	89b9      	ldrh	r1, [r7, #12]
 80033be:	2301      	movs	r3, #1
 80033c0:	2201      	movs	r2, #1
 80033c2:	f7ff fc93 	bl	8002cec <eMBMasterRegHoldingCB>
 80033c6:	4603      	mov	r3, r0
 80033c8:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80033d0:	7afb      	ldrb	r3, [r7, #11]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa9d 	bl	8003912 <prveMBError2Exception>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e001      	b.n	80033e2 <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80033de:	2303      	movs	r3, #3
 80033e0:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <eMBMasterFuncWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d004      	beq.n	800340c <eMBMasterFuncWriteMultipleHoldingRegister+0x20>
 8003402:	f001 f91b 	bl	800463c <xMBMasterRequestIsBroadcast>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d03f      	beq.n	800348c <eMBMasterFuncWriteMultipleHoldingRegister+0xa0>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f8d9 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3301      	adds	r3, #1
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3302      	adds	r3, #2
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	b29a      	uxth	r2, r3
 800342a:	8abb      	ldrh	r3, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003430:	8abb      	ldrh	r3, [r7, #20]
 8003432:	3301      	adds	r3, #1
 8003434:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3303      	adds	r3, #3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b29a      	uxth	r2, r3
 800344a:	8a7b      	ldrh	r3, [r7, #18]
 800344c:	4313      	orrs	r3, r2
 800344e:	827b      	strh	r3, [r7, #18]

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	795b      	ldrb	r3, [r3, #5]
 8003454:	747b      	strb	r3, [r7, #17]

        if( ucRegByteCount == 2 * usRegCount )
 8003456:	7c7a      	ldrb	r2, [r7, #17]
 8003458:	8a7b      	ldrh	r3, [r7, #18]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	429a      	cmp	r2, r3
 800345e:	d112      	bne.n	8003486 <eMBMasterFuncWriteMultipleHoldingRegister+0x9a>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1d98      	adds	r0, r3, #6
 8003464:	8a7a      	ldrh	r2, [r7, #18]
 8003466:	8ab9      	ldrh	r1, [r7, #20]
 8003468:	2301      	movs	r3, #1
 800346a:	f7ff fc3f 	bl	8002cec <eMBMasterRegHoldingCB>
 800346e:	4603      	mov	r3, r0
 8003470:	743b      	strb	r3, [r7, #16]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003472:	7c3b      	ldrb	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00c      	beq.n	8003492 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003478:	7c3b      	ldrb	r3, [r7, #16]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fa49 	bl	8003912 <prveMBError2Exception>
 8003480:	4603      	mov	r3, r0
 8003482:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 8003484:	e005      	b.n	8003492 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003486:	2303      	movs	r3, #3
 8003488:	75fb      	strb	r3, [r7, #23]
        if( ucRegByteCount == 2 * usRegCount )
 800348a:	e002      	b.n	8003492 <eMBMasterFuncWriteMultipleHoldingRegister+0xa6>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800348c:	2303      	movs	r3, #3
 800348e:	75fb      	strb	r3, [r7, #23]
 8003490:	e000      	b.n	8003494 <eMBMasterFuncWriteMultipleHoldingRegister+0xa8>
        if( ucRegByteCount == 2 * usRegCount )
 8003492:	bf00      	nop
    }
    return eStatus;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <eMBMasterReqReadHoldingRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	4603      	mov	r3, r0
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	460b      	mov	r3, r1
 80034ac:	81bb      	strh	r3, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d902      	bls.n	80034c2 <eMBMasterReqReadHoldingRegister+0x24>
 80034bc:	2302      	movs	r3, #2
 80034be:	75fb      	strb	r3, [r7, #23]
 80034c0:	e036      	b.n	8003530 <eMBMasterReqReadHoldingRegister+0x92>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fcc4 	bl	8003e50 <xMBMasterRunResTake>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <eMBMasterReqReadHoldingRegister+0x36>
 80034ce:	2305      	movs	r3, #5
 80034d0:	75fb      	strb	r3, [r7, #23]
 80034d2:	e02d      	b.n	8003530 <eMBMasterReqReadHoldingRegister+0x92>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80034d4:	f107 0310 	add.w	r3, r7, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f875 	bl	80045c8 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fc21 	bl	8003d28 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2203      	movs	r2, #3
 80034ea:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 80034ec:	89bb      	ldrh	r3, [r7, #12]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	3301      	adds	r3, #1
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3302      	adds	r3, #2
 80034fe:	89ba      	ldrh	r2, [r7, #12]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 8003504:	897b      	ldrh	r3, [r7, #10]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	b29a      	uxth	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3303      	adds	r3, #3
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3304      	adds	r3, #4
 8003516:	897a      	ldrh	r2, [r7, #10]
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 800351c:	2005      	movs	r0, #5
 800351e:	f001 f861 	bl	80045e4 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8003522:	2008      	movs	r0, #8
 8003524:	f000 fc5a 	bl	8003ddc <xMBMasterPortEventPost>
		eErrStatus = eMBMasterWaitRequestFinish( );
 8003528:	f000 fcde 	bl	8003ee8 <eMBMasterWaitRequestFinish>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <eMBMasterFuncReadHoldingRegister>:

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8003548:	f001 f878 	bl	800463c <xMBMasterRequestIsBroadcast>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <eMBMasterFuncReadHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]
 8003556:	e047      	b.n	80035e8 <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d941      	bls.n	80035e4 <eMBMasterFuncReadHoldingRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f82f 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3301      	adds	r3, #1
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3302      	adds	r3, #2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	8abb      	ldrh	r3, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8003584:	8abb      	ldrh	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3303      	adds	r3, #3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3304      	adds	r3, #4
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b29a      	uxth	r2, r3
 800359e:	8a7b      	ldrh	r3, [r7, #18]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 80035a4:	8a7b      	ldrh	r3, [r7, #18]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d019      	beq.n	80035de <eMBMasterFuncReadHoldingRegister+0xa4>
 80035aa:	8a7b      	ldrh	r3, [r7, #18]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	3201      	adds	r2, #1
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d112      	bne.n	80035de <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1c98      	adds	r0, r3, #2
 80035bc:	8a7a      	ldrh	r2, [r7, #18]
 80035be:	8ab9      	ldrh	r1, [r7, #20]
 80035c0:	2300      	movs	r3, #0
 80035c2:	f7ff fb93 	bl	8002cec <eMBMasterRegHoldingCB>
 80035c6:	4603      	mov	r3, r0
 80035c8:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80035ca:	7c7b      	ldrb	r3, [r7, #17]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80035d0:	7c7b      	ldrb	r3, [r7, #17]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f99d 	bl	8003912 <prveMBError2Exception>
 80035d8:	4603      	mov	r3, r0
 80035da:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80035dc:	e004      	b.n	80035e8 <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80035de:	2303      	movs	r3, #3
 80035e0:	75fb      	strb	r3, [r7, #23]
 80035e2:	e001      	b.n	80035e8 <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80035e4:	2303      	movs	r3, #3
 80035e6:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
    USHORT          usRegReadCount;
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR          *ucMBFrame;

    eMBException    eStatus = MB_EX_NONE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8003600:	f001 f81c 	bl	800463c <xMBMasterRequestIsBroadcast>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x1e>
    {
    	eStatus = MB_EX_NONE;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
 800360e:	e06b      	b.n	80036e8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d967      	bls.n	80036e8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f000 ffd3 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3302      	adds	r3, #2
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b29a      	uxth	r2, r3
 8003636:	8abb      	ldrh	r3, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800363c:	8abb      	ldrh	r3, [r7, #20]
 800363e:	3301      	adds	r3, #1
 8003640:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3303      	adds	r3, #3
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3304      	adds	r3, #4
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	8a7b      	ldrh	r3, [r7, #18]
 8003658:	4313      	orrs	r3, r2
 800365a:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3305      	adds	r3, #5
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	3306      	adds	r3, #6
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b29a      	uxth	r2, r3
 8003670:	8a3b      	ldrh	r3, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8003676:	8a3b      	ldrh	r3, [r7, #16]
 8003678:	3301      	adds	r3, #1
 800367a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3307      	adds	r3, #7
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3308      	adds	r3, #8
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	4313      	orrs	r3, r2
 8003694:	81fb      	strh	r3, [r7, #14]

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8003696:	8a7b      	ldrh	r3, [r7, #18]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	3201      	adds	r2, #1
 800369e:	7812      	ldrb	r2, [r2, #0]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d11f      	bne.n	80036e4 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf2>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f103 000a 	add.w	r0, r3, #10
 80036aa:	89fa      	ldrh	r2, [r7, #14]
 80036ac:	8a39      	ldrh	r1, [r7, #16]
 80036ae:	2301      	movs	r3, #1
 80036b0:	f7ff fb1c 	bl	8002cec <eMBMasterRegHoldingCB>
 80036b4:	4603      	mov	r3, r0
 80036b6:	75bb      	strb	r3, [r7, #22]
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80036b8:	7dbb      	ldrb	r3, [r7, #22]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xde>
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1c98      	adds	r0, r3, #2
 80036c2:	8a7a      	ldrh	r2, [r7, #18]
 80036c4:	8ab9      	ldrh	r1, [r7, #20]
 80036c6:	2300      	movs	r3, #0
 80036c8:	f7ff fb10 	bl	8002cec <eMBMasterRegHoldingCB>
 80036cc:	4603      	mov	r3, r0
 80036ce:	75bb      	strb	r3, [r7, #22]
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 80036d0:	7dbb      	ldrb	r3, [r7, #22]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80036d6:	7dbb      	ldrb	r3, [r7, #22]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 f91a 	bl	8003912 <prveMBError2Exception>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]
 80036e2:	e001      	b.n	80036e8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0xf6>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80036e4:	2303      	movs	r3, #3
 80036e6:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 8003700:	f000 ff9c 	bl	800463c <xMBMasterRequestIsBroadcast>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <eMBMasterFuncReadInputRegister+0x1e>
	{
		eStatus = MB_EX_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
 800370e:	e047      	b.n	80037a0 <eMBMasterFuncReadInputRegister+0xae>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d941      	bls.n	800379c <eMBMasterFuncReadInputRegister+0xaa>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	4618      	mov	r0, r3
 800371e:	f000 ff53 	bl	80045c8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3302      	adds	r3, #2
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b29a      	uxth	r2, r3
 8003736:	8abb      	ldrh	r3, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800373c:	8abb      	ldrh	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3303      	adds	r3, #3
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3304      	adds	r3, #4
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b29a      	uxth	r2, r3
 8003756:	8a7b      	ldrh	r3, [r7, #18]
 8003758:	4313      	orrs	r3, r2
 800375a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 800375c:	8a7b      	ldrh	r3, [r7, #18]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <eMBMasterFuncReadInputRegister+0xa4>
 8003762:	8a7b      	ldrh	r3, [r7, #18]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	3201      	adds	r2, #1
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	4293      	cmp	r3, r2
 800376e:	d112      	bne.n	8003796 <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3302      	adds	r3, #2
 8003774:	8a7a      	ldrh	r2, [r7, #18]
 8003776:	8ab9      	ldrh	r1, [r7, #20]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fa57 	bl	8002c2c <eMBMasterRegInputCB>
 800377e:	4603      	mov	r3, r0
 8003780:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8003782:	7c7b      	ldrb	r3, [r7, #17]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8003788:	7c7b      	ldrb	r3, [r7, #17]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f8c1 	bl	8003912 <prveMBError2Exception>
 8003790:	4603      	mov	r3, r0
 8003792:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8003794:	e004      	b.n	80037a0 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8003796:	2303      	movs	r3, #3
 8003798:	75fb      	strb	r3, [r7, #23]
 800379a:	e001      	b.n	80037a0 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800379c:	2303      	movs	r3, #3
 800379e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3301      	adds	r3, #1
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <eMBFuncReportSlaveID+0x30>)
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <eMBFuncReportSlaveID+0x34>)
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 ff6b 	bl	800469c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <eMBFuncReportSlaveID+0x30>)
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	200000d0 	.word	0x200000d0
 80037e0:	200000b0 	.word	0x200000b0

080037e4 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	807b      	strh	r3, [r7, #2]
 80037f6:	460b      	mov	r3, r1
 80037f8:	707b      	strb	r3, [r7, #1]
 80037fa:	4613      	mov	r3, r2
 80037fc:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 80037fe:	783b      	ldrb	r3, [r7, #0]
 8003800:	82fb      	strh	r3, [r7, #22]
    assert_param( ucNBits <= 8 );
    assert_param( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8003808:	8abb      	ldrh	r3, [r7, #20]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	b29b      	uxth	r3, r3
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8003814:	8afa      	ldrh	r2, [r7, #22]
 8003816:	8a7b      	ldrh	r3, [r7, #18]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800381e:	787b      	ldrb	r3, [r7, #1]
 8003820:	2201      	movs	r2, #1
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 800382c:	8a3a      	ldrh	r2, [r7, #16]
 800382e:	8879      	ldrh	r1, [r7, #2]
 8003830:	8abb      	ldrh	r3, [r7, #20]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1acb      	subs	r3, r1, r3
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800383c:	8abb      	ldrh	r3, [r7, #20]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8003846:	8abb      	ldrh	r3, [r7, #20]
 8003848:	3301      	adds	r3, #1
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	b21a      	sxth	r2, r3
 8003854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003858:	4313      	orrs	r3, r2
 800385a:	b21b      	sxth	r3, r3
 800385c:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 800385e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003862:	43db      	mvns	r3, r3
 8003864:	b21a      	sxth	r2, r3
 8003866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800386a:	4013      	ands	r3, r2
 800386c:	b21a      	sxth	r2, r3
 800386e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003872:	4313      	orrs	r3, r2
 8003874:	b21b      	sxth	r3, r3
 8003876:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8003878:	8abb      	ldrh	r3, [r7, #20]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	89fa      	ldrh	r2, [r7, #14]
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8003884:	89fb      	ldrh	r3, [r7, #14]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	b299      	uxth	r1, r3
 800388a:	8abb      	ldrh	r3, [r7, #20]
 800388c:	3301      	adds	r3, #1
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	08db      	lsrs	r3, r3, #3
 80038b4:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 80038b6:	89fb      	ldrh	r3, [r7, #14]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	887a      	ldrh	r2, [r7, #2]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 80038c2:	787b      	ldrb	r3, [r7, #1]
 80038c4:	2201      	movs	r2, #1
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 80038d0:	89fb      	ldrh	r3, [r7, #14]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	3301      	adds	r3, #1
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b21b      	sxth	r3, r3
 80038f0:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 80038f2:	893a      	ldrh	r2, [r7, #8]
 80038f4:	89bb      	ldrh	r3, [r7, #12]
 80038f6:	fa42 f303 	asr.w	r3, r2, r3
 80038fa:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	897b      	ldrh	r3, [r7, #10]
 8003900:	4013      	ands	r3, r2
 8003902:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 8003904:	893b      	ldrh	r3, [r7, #8]
 8003906:	b2db      	uxtb	r3, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	2b07      	cmp	r3, #7
 8003920:	d00c      	beq.n	800393c <prveMBError2Exception+0x2a>
 8003922:	2b07      	cmp	r3, #7
 8003924:	dc0d      	bgt.n	8003942 <prveMBError2Exception+0x30>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <prveMBError2Exception+0x1e>
 800392a:	2b01      	cmp	r3, #1
 800392c:	d003      	beq.n	8003936 <prveMBError2Exception+0x24>
 800392e:	e008      	b.n	8003942 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
            break;
 8003934:	e008      	b.n	8003948 <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8003936:	2302      	movs	r3, #2
 8003938:	73fb      	strb	r3, [r7, #15]
            break;
 800393a:	e005      	b.n	8003948 <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800393c:	2306      	movs	r3, #6
 800393e:	73fb      	strb	r3, [r7, #15]
            break;
 8003940:	e002      	b.n	8003948 <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8003942:	2304      	movs	r3, #4
 8003944:	73fb      	strb	r3, [r7, #15]
            break;
 8003946:	bf00      	nop
    }

    return eStatus;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <eMBMasterInit>:
#endif
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode eMBMasterInit( eMBMode eMode, void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4603      	mov	r3, r0
 8003962:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eStatus = MB_ENOERR;
 8003964:	2300      	movs	r3, #0
 8003966:	75fb      	strb	r3, [r7, #23]

	switch (eMode)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11f      	bne.n	80039ae <eMBMasterInit+0x5a>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <eMBMasterInit+0x8c>)
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <eMBMasterInit+0x90>)
 8003972:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <eMBMasterInit+0x94>)
 8003976:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <eMBMasterInit+0x98>)
 8003978:	601a      	str	r2, [r3, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <eMBMasterInit+0x9c>)
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <eMBMasterInit+0xa0>)
 800397e:	601a      	str	r2, [r3, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <eMBMasterInit+0xa4>)
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <eMBMasterInit+0xa8>)
 8003984:	601a      	str	r2, [r3, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <eMBMasterInit+0xac>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <eMBMasterInit+0xb0>)
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <eMBMasterInit+0xb4>)
 8003990:	601a      	str	r2, [r3, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <eMBMasterInit+0xb8>)
 8003994:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <eMBMasterInit+0xbc>)
 8003996:	601a      	str	r2, [r3, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <eMBMasterInit+0xc0>)
 800399a:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <eMBMasterInit+0xc4>)
 800399c:	601a      	str	r2, [r3, #0]

		eStatus = eMBMasterRTUInit(dHUART, ulBaudRate, dHTIM);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	68b8      	ldr	r0, [r7, #8]
 80039a4:	f000 fc0c 	bl	80041c0 <eMBMasterRTUInit>
 80039a8:	4603      	mov	r3, r0
 80039aa:	75fb      	strb	r3, [r7, #23]
		break;
 80039ac:	e002      	b.n	80039b4 <eMBMasterInit+0x60>

		eStatus = eMBMasterASCIIInit(dHUART, ulBaudRate, dHTIM );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 80039ae:	2302      	movs	r3, #2
 80039b0:	75fb      	strb	r3, [r7, #23]
		break;
 80039b2:	bf00      	nop
	}

	if (eStatus == MB_ENOERR)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <eMBMasterInit+0x80>
	{
		if (!xMBMasterPortEventInit())
 80039ba:	f000 fa03 	bl	8003dc4 <xMBMasterPortEventInit>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <eMBMasterInit+0x76>
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 80039c4:	2303      	movs	r3, #3
 80039c6:	75fb      	strb	r3, [r7, #23]
 80039c8:	e002      	b.n	80039d0 <eMBMasterInit+0x7c>
		}
		else
		{
			eMBState = STATE_DISABLED;
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <eMBMasterInit+0xc8>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
		}
		/* initialize the OS resource for modbus master. */
		vMBMasterOsResInit();
 80039d0:	f000 fa38 	bl	8003e44 <vMBMasterOsResInit>
	}
	return eStatus;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200000dc 	.word	0x200000dc
 80039e4:	0800422d 	.word	0x0800422d
 80039e8:	200000e0 	.word	0x200000e0
 80039ec:	08004255 	.word	0x08004255
 80039f0:	200000d8 	.word	0x200000d8
 80039f4:	080042e1 	.word	0x080042e1
 80039f8:	200000e4 	.word	0x200000e4
 80039fc:	08004271 	.word	0x08004271
 8003a00:	200000e8 	.word	0x200000e8
 8003a04:	20000564 	.word	0x20000564
 8003a08:	080043b5 	.word	0x080043b5
 8003a0c:	20000560 	.word	0x20000560
 8003a10:	08004471 	.word	0x08004471
 8003a14:	20000568 	.word	0x20000568
 8003a18:	08004511 	.word	0x08004511
 8003a1c:	20000009 	.word	0x20000009

08003a20 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8003a26:	2300      	movs	r3, #0
 8003a28:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <eMBMasterEnable+0x30>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d106      	bne.n	8003a40 <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <eMBMasterEnable+0x34>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <eMBMasterEnable+0x30>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e001      	b.n	8003a44 <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8003a40:	2306      	movs	r3, #6
 8003a42:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8003a44:	79fb      	ldrb	r3, [r7, #7]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000009 	.word	0x20000009
 8003a54:	200000dc 	.word	0x200000dc

08003a58 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 8003a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 8003a62:	4b9b      	ldr	r3, [pc, #620]	; (8003cd0 <eMBMasterPoll+0x278>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <eMBMasterPoll+0x1e>
 8003a6a:	4b99      	ldr	r3, [pc, #612]	; (8003cd0 <eMBMasterPoll+0x278>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d001      	beq.n	8003a76 <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 8003a72:	2306      	movs	r3, #6
 8003a74:	e127      	b.n	8003cc6 <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f9c5 	bl	8003e08 <xMBMasterPortEventGet>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 811c 	bne.w	8003cbe <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 8003a86:	88bb      	ldrh	r3, [r7, #4]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	f200 8119 	bhi.w	8003cc2 <eMBMasterPoll+0x26a>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <eMBMasterPoll+0x40>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ae1 	.word	0x08003ae1
 8003aa0:	08003cc3 	.word	0x08003cc3
 8003aa4:	08003b1f 	.word	0x08003b1f
 8003aa8:	08003cc3 	.word	0x08003cc3
 8003aac:	08003cc3 	.word	0x08003cc3
 8003ab0:	08003cc3 	.word	0x08003cc3
 8003ab4:	08003c13 	.word	0x08003c13
 8003ab8:	08003cc3 	.word	0x08003cc3
 8003abc:	08003cc3 	.word	0x08003cc3
 8003ac0:	08003cc3 	.word	0x08003cc3
 8003ac4:	08003cc3 	.word	0x08003cc3
 8003ac8:	08003cc3 	.word	0x08003cc3
 8003acc:	08003cc3 	.word	0x08003cc3
 8003ad0:	08003cc3 	.word	0x08003cc3
 8003ad4:	08003c3d 	.word	0x08003c3d
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 8003ad8:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <eMBMasterPoll+0x278>)
 8003ada:	2203      	movs	r2, #3
 8003adc:	701a      	strb	r2, [r3, #0]
            break;
 8003ade:	e0f1      	b.n	8003cc4 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8003ae0:	4b7c      	ldr	r3, [pc, #496]	; (8003cd4 <eMBMasterPoll+0x27c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <eMBMasterPoll+0x280>)
 8003ae6:	497d      	ldr	r1, [pc, #500]	; (8003cdc <eMBMasterPoll+0x284>)
 8003ae8:	487d      	ldr	r0, [pc, #500]	; (8003ce0 <eMBMasterPoll+0x288>)
 8003aea:	4798      	blx	r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <eMBMasterPoll+0xb8>
 8003af6:	f000 f90d 	bl	8003d14 <ucMBMasterGetDestAddress>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b78      	ldr	r3, [pc, #480]	; (8003ce0 <eMBMasterPoll+0x288>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d104      	bne.n	8003b10 <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8003b06:	2004      	movs	r0, #4
 8003b08:	f000 f968 	bl	8003ddc <xMBMasterPortEventPost>
 8003b0c:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 8003b0e:	e0d9      	b.n	8003cc4 <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8003b10:	2001      	movs	r0, #1
 8003b12:	f000 f923 	bl	8003d5c <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8003b16:	2010      	movs	r0, #16
 8003b18:	f000 f960 	bl	8003ddc <xMBMasterPortEventPost>
            break;
 8003b1c:	e0d2      	b.n	8003cc4 <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <eMBMasterPoll+0x284>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <eMBMasterPoll+0x28c>)
 8003b26:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8003b28:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <eMBMasterPoll+0x290>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <eMBMasterPoll+0x28c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	da06      	bge.n	8003b46 <eMBMasterPoll+0xee>
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 8003b38:	4b68      	ldr	r3, [pc, #416]	; (8003cdc <eMBMasterPoll+0x284>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	4b69      	ldr	r3, [pc, #420]	; (8003ce8 <eMBMasterPoll+0x290>)
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e055      	b.n	8003bf2 <eMBMasterPoll+0x19a>
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e04d      	b.n	8003be8 <eMBMasterPoll+0x190>
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8003b4c:	4a67      	ldr	r2, [pc, #412]	; (8003cec <eMBMasterPoll+0x294>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04b      	beq.n	8003bf0 <eMBMasterPoll+0x198>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8003b58:	4a64      	ldr	r2, [pc, #400]	; (8003cec <eMBMasterPoll+0x294>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8003b60:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <eMBMasterPoll+0x28c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d13c      	bne.n	8003be2 <eMBMasterPoll+0x18a>
						vMBMasterSetCBRunInMasterMode(TRUE);
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f000 f8c3 	bl	8003cf4 <vMBMasterSetCBRunInMasterMode>
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 8003b6e:	f000 fd65 	bl	800463c <xMBMasterRequestIsBroadcast>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d022      	beq.n	8003bbe <eMBMasterPoll+0x166>
							usLength = usMBMasterGetPDUSndLength();
 8003b78:	f000 fd44 	bl	8004604 <usMBMasterGetPDUSndLength>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <eMBMasterPoll+0x280>)
 8003b82:	801a      	strh	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8003b84:	2301      	movs	r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	e015      	b.n	8003bb6 <eMBMasterPoll+0x15e>
								vMBMasterSetDestAddress(j);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f8ca 	bl	8003d28 <vMBMasterSetDestAddress>
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003b94:	4a55      	ldr	r2, [pc, #340]	; (8003cec <eMBMasterPoll+0x294>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4a4f      	ldr	r2, [pc, #316]	; (8003cdc <eMBMasterPoll+0x284>)
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	494d      	ldr	r1, [pc, #308]	; (8003cd8 <eMBMasterPoll+0x280>)
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4798      	blx	r3
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b4e      	ldr	r3, [pc, #312]	; (8003ce8 <eMBMasterPoll+0x290>)
 8003bae:	701a      	strb	r2, [r3, #0]
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	dde6      	ble.n	8003b8a <eMBMasterPoll+0x132>
 8003bbc:	e00d      	b.n	8003bda <eMBMasterPoll+0x182>
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8003bbe:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <eMBMasterPoll+0x294>)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a44      	ldr	r2, [pc, #272]	; (8003cdc <eMBMasterPoll+0x284>)
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	4942      	ldr	r1, [pc, #264]	; (8003cd8 <eMBMasterPoll+0x280>)
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4798      	blx	r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b44      	ldr	r3, [pc, #272]	; (8003ce8 <eMBMasterPoll+0x290>)
 8003bd8:	701a      	strb	r2, [r3, #0]
						}
						vMBMasterSetCBRunInMasterMode(FALSE);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f000 f88a 	bl	8003cf4 <vMBMasterSetCBRunInMasterMode>
						break;
 8003be0:	e007      	b.n	8003bf2 <eMBMasterPoll+0x19a>
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b0f      	cmp	r3, #15
 8003bec:	ddae      	ble.n	8003b4c <eMBMasterPoll+0xf4>
 8003bee:	e000      	b.n	8003bf2 <eMBMasterPoll+0x19a>
						break;
 8003bf0:	bf00      	nop
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <eMBMasterPoll+0x290>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <eMBMasterPoll+0x1b0>
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 8003bfa:	2002      	movs	r0, #2
 8003bfc:	f000 f8ae 	bl	8003d5c <vMBMasterSetErrorType>
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8003c00:	2010      	movs	r0, #16
 8003c02:	f000 f8eb 	bl	8003ddc <xMBMasterPortEventPost>
            }
            else {
            	vMBMasterCBRequestScuuess( );
            	vMBMasterRunResRelease( );
            }
            break;
 8003c06:	e05d      	b.n	8003cc4 <eMBMasterPoll+0x26c>
            	vMBMasterCBRequestScuuess( );
 8003c08:	f000 f966 	bl	8003ed8 <vMBMasterCBRequestScuuess>
            	vMBMasterRunResRelease( );
 8003c0c:	f000 f92a 	bl	8003e64 <vMBMasterRunResRelease>
            break;
 8003c10:	e058      	b.n	8003cc4 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 8003c12:	4832      	ldr	r0, [pc, #200]	; (8003cdc <eMBMasterPoll+0x284>)
 8003c14:	f000 fcd8 	bl	80045c8 <vMBMasterGetPDUSndBuf>
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8003c18:	4b35      	ldr	r3, [pc, #212]	; (8003cf0 <eMBMasterPoll+0x298>)
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	f000 f87a 	bl	8003d14 <ucMBMasterGetDestAddress>
 8003c20:	4603      	mov	r3, r0
 8003c22:	461e      	mov	r6, r3
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <eMBMasterPoll+0x284>)
 8003c26:	681d      	ldr	r5, [r3, #0]
 8003c28:	f000 fcec 	bl	8004604 <usMBMasterGetPDUSndLength>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4629      	mov	r1, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	47a0      	blx	r4
 8003c36:	4603      	mov	r3, r0
 8003c38:	71fb      	strb	r3, [r7, #7]
            break;
 8003c3a:	e043      	b.n	8003cc4 <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
 8003c3c:	f000 f884 	bl	8003d48 <eMBMasterGetErrorType>
 8003c40:	4603      	mov	r3, r0
 8003c42:	71bb      	strb	r3, [r7, #6]
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 8003c44:	4825      	ldr	r0, [pc, #148]	; (8003cdc <eMBMasterPoll+0x284>)
 8003c46:	f000 fcbf 	bl	80045c8 <vMBMasterGetPDUSndBuf>
			switch (errorType) {
 8003c4a:	79bb      	ldrb	r3, [r7, #6]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d024      	beq.n	8003c9a <eMBMasterPoll+0x242>
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	dc31      	bgt.n	8003cb8 <eMBMasterPoll+0x260>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <eMBMasterPoll+0x206>
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d00f      	beq.n	8003c7c <eMBMasterPoll+0x224>
 8003c5c:	e02c      	b.n	8003cb8 <eMBMasterPoll+0x260>
			case EV_ERROR_RESPOND_TIMEOUT:
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8003c5e:	f000 f859 	bl	8003d14 <ucMBMasterGetDestAddress>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461d      	mov	r5, r3
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <eMBMasterPoll+0x284>)
 8003c68:	681c      	ldr	r4, [r3, #0]
 8003c6a:	f000 fccb 	bl	8004604 <usMBMasterGetPDUSndLength>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	4621      	mov	r1, r4
 8003c74:	4628      	mov	r0, r5
 8003c76:	f000 f901 	bl	8003e7c <vMBMasterErrorCBRespondTimeout>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8003c7a:	e01d      	b.n	8003cb8 <eMBMasterPoll+0x260>
			case EV_ERROR_RECEIVE_DATA:
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8003c7c:	f000 f84a 	bl	8003d14 <ucMBMasterGetDestAddress>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461d      	mov	r5, r3
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <eMBMasterPoll+0x284>)
 8003c86:	681c      	ldr	r4, [r3, #0]
 8003c88:	f000 fcbc 	bl	8004604 <usMBMasterGetPDUSndLength>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4621      	mov	r1, r4
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 f901 	bl	8003e9a <vMBMasterErrorCBReceiveData>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8003c98:	e00e      	b.n	8003cb8 <eMBMasterPoll+0x260>
			case EV_ERROR_EXECUTE_FUNCTION:
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8003c9a:	f000 f83b 	bl	8003d14 <ucMBMasterGetDestAddress>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <eMBMasterPoll+0x284>)
 8003ca4:	681c      	ldr	r4, [r3, #0]
 8003ca6:	f000 fcad 	bl	8004604 <usMBMasterGetPDUSndLength>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f901 	bl	8003eb8 <vMBMasterErrorCBExecuteFunction>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8003cb6:	bf00      	nop
			}
			vMBMasterRunResRelease();
 8003cb8:	f000 f8d4 	bl	8003e64 <vMBMasterRunResRelease>
        	break;
 8003cbc:	e002      	b.n	8003cc4 <eMBMasterPoll+0x26c>
            
        default:
            break;
        }

    }
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <eMBMasterPoll+0x26c>
            break;
 8003cc2:	bf00      	nop
    return MB_ENOERR;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000009 	.word	0x20000009
 8003cd4:	200000e4 	.word	0x200000e4
 8003cd8:	200000f4 	.word	0x200000f4
 8003cdc:	200000f0 	.word	0x200000f0
 8003ce0:	200000ec 	.word	0x200000ec
 8003ce4:	200000f6 	.word	0x200000f6
 8003ce8:	200000f7 	.word	0x200000f7
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	200000d8 	.word	0x200000d8

08003cf4 <vMBMasterSetCBRunInMasterMode>:
{
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
	xMBRunInMasterMode = IsMasterMode;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <vMBMasterSetCBRunInMasterMode+0x1c>)
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	7013      	strb	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	200000d3 	.word	0x200000d3

08003d14 <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
	return ucMBMasterDestAddress;
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <ucMBMasterGetDestAddress+0x10>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	200000d2 	.word	0x200000d2

08003d28 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
	ucMBMasterDestAddress = Address;
 8003d32:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <vMBMasterSetDestAddress+0x1c>)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	7013      	strb	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200000d2 	.word	0x200000d2

08003d48 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
	return eMBMasterCurErrorType;
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <eMBMasterGetErrorType+0x10>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	200000d4 	.word	0x200000d4

08003d5c <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
	eMBMasterCurErrorType = errorType;
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <vMBMasterSetErrorType+0x1c>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	7013      	strb	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	200000d4 	.word	0x200000d4

08003d7c <__critical_enter>:
#include "main.h"

static uint32_t lock_count = 0;

void __critical_enter(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d80:	b672      	cpsid	i
}
 8003d82:	bf00      	nop
	__disable_irq();
	lock_count++;
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <__critical_enter+0x1c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <__critical_enter+0x1c>)
 8003d8c:	6013      	str	r3, [r2, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	200000f8 	.word	0x200000f8

08003d9c <__critical_exit>:

void __critical_exit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
	lock_count--;
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <__critical_exit+0x24>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <__critical_exit+0x24>)
 8003da8:	6013      	str	r3, [r2, #0]
	if (lock_count == 0)
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <__critical_exit+0x24>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8003db2:	b662      	cpsie	i
}
 8003db4:	bf00      	nop
		__enable_irq();
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	200000f8 	.word	0x200000f8

08003dc4 <xMBMasterPortEventInit>:
static eMBMasterEventType eQueuedEvent;
static BOOL     xEventInQueue;
BOOL xNeedPoll;
/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortEventInit( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
	xEventInQueue = FALSE;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <xMBMasterPortEventInit+0x14>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	200000fe 	.word	0x200000fe

08003ddc <xMBMasterPortEventPost>:

BOOL xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
	xEventInQueue = TRUE;
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <xMBMasterPortEventPost+0x24>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]
	eQueuedEvent = (eMBMasterEventType)eEvent;
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <xMBMasterPortEventPost+0x28>)
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	8013      	strh	r3, [r2, #0]
	return TRUE;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	200000fe 	.word	0x200000fe
 8003e04:	200000fc 	.word	0x200000fc

08003e08 <xMBMasterPortEventGet>:

BOOL xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	BOOL xEventHappened = FALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]

	if( xEventInQueue )
 8003e14:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <xMBMasterPortEventGet+0x34>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <xMBMasterPortEventGet+0x26>
	{
		*eEvent = (eMBMasterEventType)eQueuedEvent;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <xMBMasterPortEventGet+0x38>)
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	801a      	strh	r2, [r3, #0]
		xEventInQueue = FALSE;
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <xMBMasterPortEventGet+0x34>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
		xEventHappened = TRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
	}
	return xEventHappened;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	200000fe 	.word	0x200000fe
 8003e40:	200000fc 	.word	0x200000fc

08003e44 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0

}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	//HAL_Delay(lTimeOut);
	return TRUE;
 8003e58:	2301      	movs	r3, #1
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
	xNeedPoll = TRUE;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <vMBMasterRunResRelease+0x14>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	2000056c 	.word	0x2000056c

08003e7c <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData, USHORT ucPDULength)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80bb      	strh	r3, [r7, #4]
	xMBMasterPortEventPost(EV_MASTER_ERROR_RESPOND_TIMEOUT);
 8003e8c:	2040      	movs	r0, #64	; 0x40
 8003e8e:	f7ff ffa5 	bl	8003ddc <xMBMasterPortEventPost>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData, USHORT ucPDULength)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	6039      	str	r1, [r7, #0]
 8003ea4:	71fb      	strb	r3, [r7, #7]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80bb      	strh	r3, [r7, #4]
	xMBMasterPortEventPost(EV_MASTER_ERROR_RECEIVE_DATA);
 8003eaa:	2080      	movs	r0, #128	; 0x80
 8003eac:	f7ff ff96 	bl	8003ddc <xMBMasterPortEventPost>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData, USHORT ucPDULength)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80bb      	strh	r3, [r7, #4]
	xMBMasterPortEventPost(EV_MASTER_ERROR_EXECUTE_FUNCTION);
 8003ec8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ecc:	f7ff ff86 	bl	8003ddc <xMBMasterPortEventPost>
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <vMBMasterCBRequestScuuess>:
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
	xMBMasterPortEventPost(EV_MASTER_PROCESS_SUCESS);
 8003edc:	2020      	movs	r0, #32
 8003ede:	f7ff ff7d 	bl	8003ddc <xMBMasterPortEventPost>
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <eMBMasterWaitRequestFinish>:
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
	eMBMasterReqErrCode eErrStatus = MB_MRE_NO_ERR;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	71fb      	strb	r3, [r7, #7]
	//eMBMasterEventType recvedEvent;

	//xMBMasterPortEventGet(&recvedEvent);

	switch (eQueuedEvent)
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <eMBMasterWaitRequestFinish+0x48>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d00d      	beq.n	8003f18 <eMBMasterWaitRequestFinish+0x30>
 8003efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f00:	dc0d      	bgt.n	8003f1e <eMBMasterWaitRequestFinish+0x36>
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d002      	beq.n	8003f0c <eMBMasterWaitRequestFinish+0x24>
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d003      	beq.n	8003f12 <eMBMasterWaitRequestFinish+0x2a>
 8003f0a:	e008      	b.n	8003f1e <eMBMasterWaitRequestFinish+0x36>
	{
		case EV_MASTER_ERROR_RESPOND_TIMEOUT:
			eErrStatus = MB_MRE_TIMEDOUT;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	71fb      	strb	r3, [r7, #7]
		break;
 8003f10:	e008      	b.n	8003f24 <eMBMasterWaitRequestFinish+0x3c>

		case EV_MASTER_ERROR_RECEIVE_DATA:
			eErrStatus = MB_MRE_REV_DATA;
 8003f12:	2303      	movs	r3, #3
 8003f14:	71fb      	strb	r3, [r7, #7]
		break;
 8003f16:	e005      	b.n	8003f24 <eMBMasterWaitRequestFinish+0x3c>

		case EV_MASTER_ERROR_EXECUTE_FUNCTION:
			eErrStatus = MB_MRE_EXE_FUN;
 8003f18:	2306      	movs	r3, #6
 8003f1a:	71fb      	strb	r3, [r7, #7]
		break;
 8003f1c:	e002      	b.n	8003f24 <eMBMasterWaitRequestFinish+0x3c>

		default:
			eErrStatus = MB_MRE_NO_ERR;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	71fb      	strb	r3, [r7, #7]
		break;
 8003f22:	bf00      	nop
	}
	return eErrStatus;
 8003f24:	79fb      	ldrb	r3, [r7, #7]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	200000fc 	.word	0x200000fc

08003f34 <xMBMasterPortSerialInit>:
#define RS485_MASTER_RTS_HIGH 	HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_SET)

/* ----------------------- Start implementation -----------------------------*/

BOOL xMBMasterPortSerialInit(void *dHUART, ULONG ulBaudRate, void *dHTIM)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
	uart = (UART_HandleTypeDef *)dHUART;
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <xMBMasterPortSerialInit+0x20>)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6013      	str	r3, [r2, #0]

	return TRUE;
 8003f46:	2301      	movs	r3, #1
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000570 	.word	0x20000570

08003f58 <vMBMasterPortSerialEnable>:

void vMBMasterPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	460a      	mov	r2, r1
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71bb      	strb	r3, [r7, #6]
	if(xRxEnable)
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <vMBMasterPortSerialEnable+0x30>
	{
		RS485_MASTER_RTS_LOW;
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2110      	movs	r1, #16
 8003f72:	4812      	ldr	r0, [pc, #72]	; (8003fbc <vMBMasterPortSerialEnable+0x64>)
 8003f74:	f7fd f83c 	bl	8000ff0 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(uart, &singlechar, 1);
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <vMBMasterPortSerialEnable+0x68>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4911      	ldr	r1, [pc, #68]	; (8003fc4 <vMBMasterPortSerialEnable+0x6c>)
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe f954 	bl	800222e <HAL_UART_Receive_IT>
 8003f86:	e004      	b.n	8003f92 <vMBMasterPortSerialEnable+0x3a>
	}	
	else
	{
		HAL_UART_AbortReceive_IT(uart);
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <vMBMasterPortSerialEnable+0x68>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe f9cf 	bl	8002330 <HAL_UART_AbortReceive_IT>
	}

	if(xTxEnable)
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <vMBMasterPortSerialEnable+0x52>
	{
		RS485_MASTER_RTS_HIGH;
 8003f98:	2201      	movs	r2, #1
 8003f9a:	2110      	movs	r1, #16
 8003f9c:	4807      	ldr	r0, [pc, #28]	; (8003fbc <vMBMasterPortSerialEnable+0x64>)
 8003f9e:	f7fd f827 	bl	8000ff0 <HAL_GPIO_WritePin>
		pxMBMasterFrameCBTransmitterEmpty();
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <vMBMasterPortSerialEnable+0x70>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4798      	blx	r3
	}
	else
	{
		HAL_UART_AbortTransmit_IT(uart);
	}
}
 8003fa8:	e004      	b.n	8003fb4 <vMBMasterPortSerialEnable+0x5c>
		HAL_UART_AbortTransmit_IT(uart);
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <vMBMasterPortSerialEnable+0x68>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe f96e 	bl	8002290 <HAL_UART_AbortTransmit_IT>
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40010800 	.word	0x40010800
 8003fc0:	20000570 	.word	0x20000570
 8003fc4:	200000ff 	.word	0x200000ff
 8003fc8:	20000560 	.word	0x20000560

08003fcc <xMBMasterPortSerialPutBytes>:
	HAL_UART_AbortReceive_IT(uart);
	HAL_UART_AbortTransmit_IT(uart);
}

BOOL xMBMasterPortSerialPutBytes(volatile UCHAR *ucByte, USHORT usSize)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(uart, (uint8_t *)ucByte, usSize);
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <xMBMasterPortSerialPutBytes+0x24>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe f8e0 	bl	80021a6 <HAL_UART_Transmit_IT>
	return TRUE;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000570 	.word	0x20000570

08003ff4 <xMBMasterPortSerialGetByte>:
	HAL_UART_Transmit_IT(uart, (uint8_t*)&ucByte, 1);
	return TRUE;
}

BOOL xMBMasterPortSerialGetByte(CHAR * pucByte)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	*pucByte = (uint8_t)(singlechar);
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <xMBMasterPortSerialGetByte+0x1c>)
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8004004:	2301      	movs	r3, #1
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	200000ff 	.word	0x200000ff

08004014 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart->Instance)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_UART_RxCpltCallback+0x34>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d109      	bne.n	800403e <HAL_UART_RxCpltCallback+0x2a>
	{
		pxMBMasterFrameCBByteReceived();
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_UART_RxCpltCallback+0x38>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4798      	blx	r3
		HAL_UART_Receive_IT(uart, &singlechar, 1);
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_UART_RxCpltCallback+0x34>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	4906      	ldr	r1, [pc, #24]	; (8004050 <HAL_UART_RxCpltCallback+0x3c>)
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe f8f8 	bl	800222e <HAL_UART_Receive_IT>
	}
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000570 	.word	0x20000570
 800404c:	20000564 	.word	0x20000564
 8004050:	200000ff 	.word	0x200000ff

08004054 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart->Instance)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_UART_TxCpltCallback+0x24>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d102      	bne.n	8004070 <HAL_UART_TxCpltCallback+0x1c>
	{
		pxMBMasterFrameCBTransmitterEmpty();
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <HAL_UART_TxCpltCallback+0x28>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4798      	blx	r3
	}
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000570 	.word	0x20000570
 800407c:	20000560 	.word	0x20000560

08004080 <xMBMasterPortTimersInit>:
static uint16_t timeout = 0;
volatile uint16_t counter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBMasterPortTimersInit( USHORT usTimeOut50us, void *dHTIM )
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	80fb      	strh	r3, [r7, #6]
	tim = (TIM_HandleTypeDef *)dHTIM;
 800408c:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <xMBMasterPortTimersInit+0x24>)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6013      	str	r3, [r2, #0]
	timeout = usTimeOut50us;
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <xMBMasterPortTimersInit+0x28>)
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	8013      	strh	r3, [r2, #0]
    return TRUE;
 8004098:	2301      	movs	r3, #1
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	20000574 	.word	0x20000574
 80040a8:	20000100 	.word	0x20000100

080040ac <vMBMasterPortTimersT35Enable>:

void vMBMasterPortTimersT35Enable()
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
    vMBMasterSetCurTimerMode(MB_TMODE_T35);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f000 fab3 	bl	800461c <vMBMasterSetCurTimerMode>
	counter=0;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <vMBMasterPortTimersT35Enable+0x20>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim);
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <vMBMasterPortTimersT35Enable+0x24>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd fc17 	bl	80018f4 <HAL_TIM_Base_Start_IT>
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000102 	.word	0x20000102
 80040d0:	20000574 	.word	0x20000574

080040d4 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable()
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
	vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 80040d8:	2002      	movs	r0, #2
 80040da:	f000 fa9f 	bl	800461c <vMBMasterSetCurTimerMode>

}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <vMBMasterPortTimersRespondTimeoutEnable>:

void vMBMasterPortTimersRespondTimeoutEnable()
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	af00      	add	r7, sp, #0
	vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f000 fa98 	bl	800461c <vMBMasterSetCurTimerMode>

}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <vMBMasterPortTimersDisable>:

void vMBMasterPortTimersDisable()
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(tim);
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <vMBMasterPortTimersDisable+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd fc5b 	bl	80019b4 <HAL_TIM_Base_Stop_IT>
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000574 	.word	0x20000574

08004108 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == tim->Instance)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d10e      	bne.n	800413c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		if((++counter) >= timeout)
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	3301      	adds	r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	4a07      	ldr	r2, [pc, #28]	; (8004148 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800412a:	4619      	mov	r1, r3
 800412c:	8011      	strh	r1, [r2, #0]
 800412e:	4a07      	ldr	r2, [pc, #28]	; (800414c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	4293      	cmp	r3, r2
 8004134:	d302      	bcc.n	800413c <HAL_TIM_PeriodElapsedCallback+0x34>
			pxMBMasterPortCBTimerExpired();
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4798      	blx	r3
	}
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000574 	.word	0x20000574
 8004148:	20000102 	.word	0x20000102
 800414c:	20000100 	.word	0x20000100
 8004150:	20000568 	.word	0x20000568

08004154 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8004160:	23ff      	movs	r3, #255	; 0xff
 8004162:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8004164:	23ff      	movs	r3, #255	; 0xff
 8004166:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8004168:	e013      	b.n	8004192 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	7bbb      	ldrb	r3, [r7, #14]
 8004174:	4053      	eors	r3, r2
 8004176:	b2db      	uxtb	r3, r3
 8004178:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <usMBCRC16+0x64>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4413      	add	r3, r2
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	4053      	eors	r3, r2
 8004186:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8004188:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <usMBCRC16+0x68>)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4413      	add	r3, r2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	1e5a      	subs	r2, r3, #1
 8004196:	807a      	strh	r2, [r7, #2]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	b21a      	sxth	r2, r3
 80041a2:	7bbb      	ldrb	r3, [r7, #14]
 80041a4:	b21b      	sxth	r3, r3
 80041a6:	4313      	orrs	r3, r2
 80041a8:	b21b      	sxth	r3, r3
 80041aa:	b29b      	uxth	r3, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	08004708 	.word	0x08004708
 80041bc:	08004808 	.word	0x08004808

080041c0 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit( void *dHUART, ULONG ulBaudRate, void *dHTIM )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 80041d0:	f7ff fdd4 	bl	8003d7c <__critical_enter>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( dHUART, ulBaudRate, dHTIM ) != TRUE )
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff feab 	bl	8003f34 <xMBMasterPortSerialInit>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d002      	beq.n	80041ea <eMBMasterRTUInit+0x2a>
    {
        eStatus = MB_EPORTERR;
 80041e4:	2303      	movs	r3, #3
 80041e6:	75fb      	strb	r3, [r7, #23]
 80041e8:	e017      	b.n	800421a <eMBMasterRTUInit+0x5a>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80041f0:	d902      	bls.n	80041f8 <eMBMasterRTUInit+0x38>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 80041f2:	2323      	movs	r3, #35	; 0x23
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e005      	b.n	8004204 <eMBMasterRTUInit+0x44>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <eMBMasterRTUInit+0x68>)
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	613b      	str	r3, [r7, #16]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us, dHTIM ) != TRUE )
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	b29b      	uxth	r3, r3
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ff38 	bl	8004080 <xMBMasterPortTimersInit>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <eMBMasterRTUInit+0x5a>
        {
            eStatus = MB_EPORTERR;
 8004216:	2303      	movs	r3, #3
 8004218:	75fb      	strb	r3, [r7, #23]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800421a:	f7ff fdbf 	bl	8003d9c <__critical_exit>

    return eStatus;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	00177fa0 	.word	0x00177fa0

0800422c <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8004230:	f7ff fda4 	bl	8003d7c <__critical_enter>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <eMBMasterRTUStart+0x24>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800423a:	2100      	movs	r1, #0
 800423c:	2001      	movs	r0, #1
 800423e:	f7ff fe8b 	bl	8003f58 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 8004242:	f7ff ff33 	bl	80040ac <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 8004246:	f7ff fda9 	bl	8003d9c <__critical_exit>
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000105 	.word	0x20000105

08004254 <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8004258:	f7ff fd90 	bl	8003d7c <__critical_enter>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 800425c:	2100      	movs	r1, #0
 800425e:	2000      	movs	r0, #0
 8004260:	f7ff fe7a 	bl	8003f58 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8004264:	f7ff ff44 	bl	80040f0 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8004268:	f7ff fd98 	bl	8003d9c <__critical_exit>
}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}

08004270 <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800427c:	2300      	movs	r3, #0
 800427e:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8004280:	f7ff fd7c 	bl	8003d7c <__critical_enter>
    assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <eMBMasterRTUReceive+0x64>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b03      	cmp	r3, #3
 800428c:	d919      	bls.n	80042c2 <eMBMasterRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <eMBMasterRTUReceive+0x64>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	4810      	ldr	r0, [pc, #64]	; (80042d8 <eMBMasterRTUReceive+0x68>)
 8004298:	f7ff ff5c 	bl	8004154 <usMBCRC16>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <eMBMasterRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <eMBMasterRTUReceive+0x68>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <eMBMasterRTUReceive+0x64>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b03      	subs	r3, #3
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <eMBMasterRTUReceive+0x6c>)
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e001      	b.n	80042c6 <eMBMasterRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 80042c2:	2305      	movs	r3, #5
 80042c4:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 80042c6:	f7ff fd69 	bl	8003d9c <__critical_exit>
    return eStatus;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000312 	.word	0x20000312
 80042d8:	20000208 	.word	0x20000208
 80042dc:	20000209 	.word	0x20000209

080042e0 <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
 80042ec:	4613      	mov	r3, r2
 80042ee:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d901      	bls.n	80042fe <eMBMasterRTUSend+0x1e>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e04b      	b.n	8004396 <eMBMasterRTUSend+0xb6>

    ENTER_CRITICAL_SECTION(  );
 80042fe:	f7ff fd3d 	bl	8003d7c <__critical_enter>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <eMBMasterRTUSend+0xc0>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d13f      	bne.n	800438c <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3b01      	subs	r3, #1
 8004310:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <eMBMasterRTUSend+0xc4>)
 8004312:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004316:	2201      	movs	r2, #1
 8004318:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <eMBMasterRTUSend+0xc4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	79fa      	ldrb	r2, [r7, #7]
 8004320:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29a      	uxth	r2, r3
 8004328:	88bb      	ldrh	r3, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	b29a      	uxth	r2, r3
 800432e:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004330:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <eMBMasterRTUSend+0xc4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	b292      	uxth	r2, r2
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff08 	bl	8004154 <usMBCRC16>
 8004344:	4603      	mov	r3, r0
 8004346:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	b291      	uxth	r1, r2
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004354:	8011      	strh	r1, [r2, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	89bb      	ldrh	r3, [r7, #12]
 800435a:	b2d9      	uxtb	r1, r3
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <eMBMasterRTUSend+0xcc>)
 800435e:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8004360:	89bb      	ldrh	r3, [r7, #12]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	b299      	uxth	r1, r3
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	b290      	uxth	r0, r2
 8004370:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <eMBMasterRTUSend+0xc8>)
 8004372:	8010      	strh	r0, [r2, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	b2c9      	uxtb	r1, r1
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <eMBMasterRTUSend+0xcc>)
 800437a:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <eMBMasterRTUSend+0xd0>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8004382:	2101      	movs	r1, #1
 8004384:	2000      	movs	r0, #0
 8004386:	f7ff fde7 	bl	8003f58 <vMBMasterPortSerialEnable>
 800438a:	e001      	b.n	8004390 <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 800438c:	2305      	movs	r3, #5
 800438e:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8004390:	f7ff fd04 	bl	8003d9c <__critical_exit>
    return eStatus;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000105 	.word	0x20000105
 80043a4:	2000030c 	.word	0x2000030c
 80043a8:	20000310 	.word	0x20000310
 80043ac:	20000108 	.word	0x20000108
 80043b0:	20000104 	.word	0x20000104

080043b4 <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 80043be:	1dbb      	adds	r3, r7, #6
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fe17 	bl	8003ff4 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 80043c6:	4b26      	ldr	r3, [pc, #152]	; (8004460 <xMBMasterRTUReceiveFSM+0xac>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d841      	bhi.n	8004454 <xMBMasterRTUReceiveFSM+0xa0>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <xMBMasterRTUReceiveFSM+0x24>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043f5 	.word	0x080043f5
 80043e0:	08004427 	.word	0x08004427
 80043e4:	080043ef 	.word	0x080043ef
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 80043e8:	f7ff fe60 	bl	80040ac <vMBMasterPortTimersT35Enable>
        break;
 80043ec:	e032      	b.n	8004454 <xMBMasterRTUReceiveFSM+0xa0>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 80043ee:	f7ff fe5d 	bl	80040ac <vMBMasterPortTimersT35Enable>
        break;
 80043f2:	e02f      	b.n	8004454 <xMBMasterRTUReceiveFSM+0xa0>
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 80043f4:	f7ff fe7c 	bl	80040f0 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <xMBMasterRTUReceiveFSM+0xb0>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <xMBMasterRTUReceiveFSM+0xb4>)
 8004400:	2200      	movs	r2, #0
 8004402:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8004404:	4b18      	ldr	r3, [pc, #96]	; (8004468 <xMBMasterRTUReceiveFSM+0xb4>)
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	b291      	uxth	r1, r2
 800440e:	4a16      	ldr	r2, [pc, #88]	; (8004468 <xMBMasterRTUReceiveFSM+0xb4>)
 8004410:	8011      	strh	r1, [r2, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	79b9      	ldrb	r1, [r7, #6]
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <xMBMasterRTUReceiveFSM+0xb8>)
 8004418:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <xMBMasterRTUReceiveFSM+0xac>)
 800441c:	2202      	movs	r2, #2
 800441e:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 8004420:	f7ff fe44 	bl	80040ac <vMBMasterPortTimersT35Enable>
        break;
 8004424:	e016      	b.n	8004454 <xMBMasterRTUReceiveFSM+0xa0>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <xMBMasterRTUReceiveFSM+0xb4>)
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	2bff      	cmp	r3, #255	; 0xff
 800442e:	d80b      	bhi.n	8004448 <xMBMasterRTUReceiveFSM+0x94>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <xMBMasterRTUReceiveFSM+0xb4>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	b291      	uxth	r1, r2
 800443a:	4a0b      	ldr	r2, [pc, #44]	; (8004468 <xMBMasterRTUReceiveFSM+0xb4>)
 800443c:	8011      	strh	r1, [r2, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	79b9      	ldrb	r1, [r7, #6]
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <xMBMasterRTUReceiveFSM+0xb8>)
 8004444:	5499      	strb	r1, [r3, r2]
 8004446:	e002      	b.n	800444e <xMBMasterRTUReceiveFSM+0x9a>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <xMBMasterRTUReceiveFSM+0xac>)
 800444a:	2203      	movs	r2, #3
 800444c:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 800444e:	f7ff fe2d 	bl	80040ac <vMBMasterPortTimersT35Enable>
        break;
 8004452:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8004454:	79fb      	ldrb	r3, [r7, #7]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000105 	.word	0x20000105
 8004464:	20000104 	.word	0x20000104
 8004468:	20000312 	.word	0x20000312
 800446c:	20000208 	.word	0x20000208

08004470 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8004476:	2300      	movs	r3, #0
 8004478:	71fb      	strb	r3, [r7, #7]

    assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 800447a:	4b20      	ldr	r3, [pc, #128]	; (80044fc <xMBMasterRTUTransmitFSM+0x8c>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <xMBMasterRTUTransmitFSM+0x1a>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d005      	beq.n	8004494 <xMBMasterRTUTransmitFSM+0x24>
            }
        }
        break;

    default:
        break;
 8004488:	e033      	b.n	80044f2 <xMBMasterRTUTransmitFSM+0x82>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 800448a:	2100      	movs	r1, #0
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fd63 	bl	8003f58 <vMBMasterPortSerialEnable>
        break;
 8004492:	e02e      	b.n	80044f2 <xMBMasterRTUTransmitFSM+0x82>
        if( usMasterSndBufferCount != 0 )
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <xMBMasterRTUTransmitFSM+0x90>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <xMBMasterRTUTransmitFSM+0x48>
			xMBMasterPortSerialPutBytes(pucMasterSndBufferCur, usMasterSndBufferCount);
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <xMBMasterRTUTransmitFSM+0x94>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a17      	ldr	r2, [pc, #92]	; (8004500 <xMBMasterRTUTransmitFSM+0x90>)
 80044a4:	8812      	ldrh	r2, [r2, #0]
 80044a6:	b292      	uxth	r2, r2
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fd8e 	bl	8003fcc <xMBMasterPortSerialPutBytes>
			usMasterSndBufferCount = 0;
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <xMBMasterRTUTransmitFSM+0x90>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	801a      	strh	r2, [r3, #0]
        break;
 80044b6:	e01b      	b.n	80044f0 <xMBMasterRTUTransmitFSM+0x80>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 80044b8:	4b13      	ldr	r3, [pc, #76]	; (8004508 <xMBMasterRTUTransmitFSM+0x98>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <xMBMasterRTUTransmitFSM+0x9c>)
 80044cc:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 80044ce:	2100      	movs	r1, #0
 80044d0:	2001      	movs	r0, #1
 80044d2:	f7ff fd41 	bl	8003f58 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <xMBMasterRTUTransmitFSM+0x8c>)
 80044d8:	2202      	movs	r2, #2
 80044da:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <xMBMasterRTUTransmitFSM+0x9c>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d102      	bne.n	80044ec <xMBMasterRTUTransmitFSM+0x7c>
            	vMBMasterPortTimersConvertDelayEnable( );
 80044e6:	f7ff fdf5 	bl	80040d4 <vMBMasterPortTimersConvertDelayEnable>
        break;
 80044ea:	e001      	b.n	80044f0 <xMBMasterRTUTransmitFSM+0x80>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 80044ec:	f7ff fdf9 	bl	80040e2 <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 80044f0:	bf00      	nop
    }

    return xNeedPoll;
 80044f2:	79fb      	ldrb	r3, [r7, #7]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000104 	.word	0x20000104
 8004500:	20000310 	.word	0x20000310
 8004504:	2000030c 	.word	0x2000030c
 8004508:	20000108 	.word	0x20000108
 800450c:	20000314 	.word	0x20000314

08004510 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	71fb      	strb	r3, [r7, #7]

	switch (eRcvState)
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <xMBMasterRTUTimerExpired+0xa8>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b03      	cmp	r3, #3
 8004522:	d012      	beq.n	800454a <xMBMasterRTUTimerExpired+0x3a>
 8004524:	2b03      	cmp	r3, #3
 8004526:	dc19      	bgt.n	800455c <xMBMasterRTUTimerExpired+0x4c>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <xMBMasterRTUTimerExpired+0x22>
 800452c:	2b02      	cmp	r3, #2
 800452e:	d006      	beq.n	800453e <xMBMasterRTUTimerExpired+0x2e>
		/* Function called in an illegal state. */
	default:
		assert_param(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
 8004530:	e014      	b.n	800455c <xMBMasterRTUTimerExpired+0x4c>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 8004532:	2001      	movs	r0, #1
 8004534:	f7ff fc52 	bl	8003ddc <xMBMasterPortEventPost>
 8004538:	4603      	mov	r3, r0
 800453a:	71fb      	strb	r3, [r7, #7]
		break;
 800453c:	e00f      	b.n	800455e <xMBMasterRTUTimerExpired+0x4e>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 800453e:	2002      	movs	r0, #2
 8004540:	f7ff fc4c 	bl	8003ddc <xMBMasterPortEventPost>
 8004544:	4603      	mov	r3, r0
 8004546:	71fb      	strb	r3, [r7, #7]
		break;
 8004548:	e009      	b.n	800455e <xMBMasterRTUTimerExpired+0x4e>
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 800454a:	2001      	movs	r0, #1
 800454c:	f7ff fc06 	bl	8003d5c <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8004550:	2010      	movs	r0, #16
 8004552:	f7ff fc43 	bl	8003ddc <xMBMasterPortEventPost>
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
		break;
 800455a:	e000      	b.n	800455e <xMBMasterRTUTimerExpired+0x4e>
		break;
 800455c:	bf00      	nop
	}
	eRcvState = STATE_M_RX_IDLE;
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <xMBMasterRTUTimerExpired+0xa8>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]

	switch (eSndState)
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <xMBMasterRTUTimerExpired+0xac>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d10d      	bne.n	800458a <xMBMasterRTUTimerExpired+0x7a>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		if ( xFrameIsBroadcast == FALSE ) {
 800456e:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <xMBMasterRTUTimerExpired+0xb0>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xMBMasterRTUTimerExpired+0x7e>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 8004578:	2000      	movs	r0, #0
 800457a:	f7ff fbef 	bl	8003d5c <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 800457e:	2010      	movs	r0, #16
 8004580:	f7ff fc2c 	bl	8003ddc <xMBMasterPortEventPost>
 8004584:	4603      	mov	r3, r0
 8004586:	71fb      	strb	r3, [r7, #7]
		}
		break;
 8004588:	e001      	b.n	800458e <xMBMasterRTUTimerExpired+0x7e>
		/* Function called in an illegal state. */
	default:
		assert_param(
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <xMBMasterRTUTimerExpired+0x80>
		break;
 800458e:	bf00      	nop
	}
	eSndState = STATE_M_TX_IDLE;
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <xMBMasterRTUTimerExpired+0xac>)
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]

	vMBMasterPortTimersDisable( );
 8004596:	f7ff fdab 	bl	80040f0 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <xMBMasterRTUTimerExpired+0xb4>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d104      	bne.n	80045ae <xMBMasterRTUTimerExpired+0x9e>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 80045a4:	2004      	movs	r0, #4
 80045a6:	f7ff fc19 	bl	8003ddc <xMBMasterPortEventPost>
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
	}

	return xNeedPoll;
 80045ae:	79fb      	ldrb	r3, [r7, #7]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000105 	.word	0x20000105
 80045bc:	20000104 	.word	0x20000104
 80045c0:	20000314 	.word	0x20000314
 80045c4:	20000315 	.word	0x20000315

080045c8 <vMBMasterGetPDUSndBuf>:
	*pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a03      	ldr	r2, [pc, #12]	; (80045e0 <vMBMasterGetPDUSndBuf+0x18>)
 80045d4:	601a      	str	r2, [r3, #0]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	20000109 	.word	0x20000109

080045e4 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	80fb      	strh	r3, [r7, #6]
	usMasterSendPDULength = SendPDULength;
 80045ee:	4a04      	ldr	r2, [pc, #16]	; (8004600 <vMBMasterSetPDUSndLength+0x1c>)
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	8013      	strh	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000308 	.word	0x20000308

08004604 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
	return usMasterSendPDULength;
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <usMBMasterGetPDUSndLength+0x14>)
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000308 	.word	0x20000308

0800461c <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
	eMasterCurTimerMode = eMBTimerMode;
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <vMBMasterSetCurTimerMode+0x1c>)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	7013      	strb	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20000315 	.word	0x20000315

0800463c <xMBMasterRequestIsBroadcast>:

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void )
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
	return xFrameIsBroadcast;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <xMBMasterRequestIsBroadcast+0x14>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
}
 8004646:	4618      	mov	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000314 	.word	0x20000314

08004654 <__libc_init_array>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	2600      	movs	r6, #0
 8004658:	4d0c      	ldr	r5, [pc, #48]	; (800468c <__libc_init_array+0x38>)
 800465a:	4c0d      	ldr	r4, [pc, #52]	; (8004690 <__libc_init_array+0x3c>)
 800465c:	1b64      	subs	r4, r4, r5
 800465e:	10a4      	asrs	r4, r4, #2
 8004660:	42a6      	cmp	r6, r4
 8004662:	d109      	bne.n	8004678 <__libc_init_array+0x24>
 8004664:	f000 f830 	bl	80046c8 <_init>
 8004668:	2600      	movs	r6, #0
 800466a:	4d0a      	ldr	r5, [pc, #40]	; (8004694 <__libc_init_array+0x40>)
 800466c:	4c0a      	ldr	r4, [pc, #40]	; (8004698 <__libc_init_array+0x44>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	42a6      	cmp	r6, r4
 8004674:	d105      	bne.n	8004682 <__libc_init_array+0x2e>
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	f855 3b04 	ldr.w	r3, [r5], #4
 800467c:	4798      	blx	r3
 800467e:	3601      	adds	r6, #1
 8004680:	e7ee      	b.n	8004660 <__libc_init_array+0xc>
 8004682:	f855 3b04 	ldr.w	r3, [r5], #4
 8004686:	4798      	blx	r3
 8004688:	3601      	adds	r6, #1
 800468a:	e7f2      	b.n	8004672 <__libc_init_array+0x1e>
 800468c:	08004908 	.word	0x08004908
 8004690:	08004908 	.word	0x08004908
 8004694:	08004908 	.word	0x08004908
 8004698:	0800490c 	.word	0x0800490c

0800469c <memcpy>:
 800469c:	440a      	add	r2, r1
 800469e:	4291      	cmp	r1, r2
 80046a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a4:	d100      	bne.n	80046a8 <memcpy+0xc>
 80046a6:	4770      	bx	lr
 80046a8:	b510      	push	{r4, lr}
 80046aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ae:	4291      	cmp	r1, r2
 80046b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046b4:	d1f9      	bne.n	80046aa <memcpy+0xe>
 80046b6:	bd10      	pop	{r4, pc}

080046b8 <memset>:
 80046b8:	4603      	mov	r3, r0
 80046ba:	4402      	add	r2, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	f803 1b01 	strb.w	r1, [r3], #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <_init>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr

080046d4 <_fini>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr
